

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Apr 30 15:24:13 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	intentry,global,class=CODE,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	dabs	1,0x7E,2
    30  0000                     
    31                           ; Version 2.05
    32                           ; Generated 20/12/2018 GMT
    33                           ; 
    34                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC16F887 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     	;# 
    66  0001                     	;# 
    67  0002                     	;# 
    68  0003                     	;# 
    69  0004                     	;# 
    70  0005                     	;# 
    71  0006                     	;# 
    72  0007                     	;# 
    73  0008                     	;# 
    74  0009                     	;# 
    75  000A                     	;# 
    76  000B                     	;# 
    77  000C                     	;# 
    78  000D                     	;# 
    79  000E                     	;# 
    80  000E                     	;# 
    81  000F                     	;# 
    82  0010                     	;# 
    83  0011                     	;# 
    84  0012                     	;# 
    85  0013                     	;# 
    86  0014                     	;# 
    87  0015                     	;# 
    88  0015                     	;# 
    89  0016                     	;# 
    90  0017                     	;# 
    91  0018                     	;# 
    92  0019                     	;# 
    93  001A                     	;# 
    94  001B                     	;# 
    95  001B                     	;# 
    96  001C                     	;# 
    97  001D                     	;# 
    98  001E                     	;# 
    99  001F                     	;# 
   100  0081                     	;# 
   101  0085                     	;# 
   102  0086                     	;# 
   103  0087                     	;# 
   104  0088                     	;# 
   105  0089                     	;# 
   106  008C                     	;# 
   107  008D                     	;# 
   108  008E                     	;# 
   109  008F                     	;# 
   110  0090                     	;# 
   111  0091                     	;# 
   112  0092                     	;# 
   113  0093                     	;# 
   114  0093                     	;# 
   115  0093                     	;# 
   116  0094                     	;# 
   117  0095                     	;# 
   118  0096                     	;# 
   119  0097                     	;# 
   120  0098                     	;# 
   121  0099                     	;# 
   122  009A                     	;# 
   123  009B                     	;# 
   124  009C                     	;# 
   125  009D                     	;# 
   126  009E                     	;# 
   127  009F                     	;# 
   128  0105                     	;# 
   129  0107                     	;# 
   130  0108                     	;# 
   131  0109                     	;# 
   132  010C                     	;# 
   133  010C                     	;# 
   134  010D                     	;# 
   135  010E                     	;# 
   136  010F                     	;# 
   137  0185                     	;# 
   138  0187                     	;# 
   139  0188                     	;# 
   140  0189                     	;# 
   141  018C                     	;# 
   142  018D                     	;# 
   143  0000                     	;# 
   144  0001                     	;# 
   145  0002                     	;# 
   146  0003                     	;# 
   147  0004                     	;# 
   148  0005                     	;# 
   149  0006                     	;# 
   150  0007                     	;# 
   151  0008                     	;# 
   152  0009                     	;# 
   153  000A                     	;# 
   154  000B                     	;# 
   155  000C                     	;# 
   156  000D                     	;# 
   157  000E                     	;# 
   158  000E                     	;# 
   159  000F                     	;# 
   160  0010                     	;# 
   161  0011                     	;# 
   162  0012                     	;# 
   163  0013                     	;# 
   164  0014                     	;# 
   165  0015                     	;# 
   166  0015                     	;# 
   167  0016                     	;# 
   168  0017                     	;# 
   169  0018                     	;# 
   170  0019                     	;# 
   171  001A                     	;# 
   172  001B                     	;# 
   173  001B                     	;# 
   174  001C                     	;# 
   175  001D                     	;# 
   176  001E                     	;# 
   177  001F                     	;# 
   178  0081                     	;# 
   179  0085                     	;# 
   180  0086                     	;# 
   181  0087                     	;# 
   182  0088                     	;# 
   183  0089                     	;# 
   184  008C                     	;# 
   185  008D                     	;# 
   186  008E                     	;# 
   187  008F                     	;# 
   188  0090                     	;# 
   189  0091                     	;# 
   190  0092                     	;# 
   191  0093                     	;# 
   192  0093                     	;# 
   193  0093                     	;# 
   194  0094                     	;# 
   195  0095                     	;# 
   196  0096                     	;# 
   197  0097                     	;# 
   198  0098                     	;# 
   199  0099                     	;# 
   200  009A                     	;# 
   201  009B                     	;# 
   202  009C                     	;# 
   203  009D                     	;# 
   204  009E                     	;# 
   205  009F                     	;# 
   206  0105                     	;# 
   207  0107                     	;# 
   208  0108                     	;# 
   209  0109                     	;# 
   210  010C                     	;# 
   211  010C                     	;# 
   212  010D                     	;# 
   213  010E                     	;# 
   214  010F                     	;# 
   215  0185                     	;# 
   216  0187                     	;# 
   217  0188                     	;# 
   218  0189                     	;# 
   219  018C                     	;# 
   220  018D                     	;# 
   221  0000                     	;# 
   222  0001                     	;# 
   223  0002                     	;# 
   224  0003                     	;# 
   225  0004                     	;# 
   226  0005                     	;# 
   227  0006                     	;# 
   228  0007                     	;# 
   229  0008                     	;# 
   230  0009                     	;# 
   231  000A                     	;# 
   232  000B                     	;# 
   233  000C                     	;# 
   234  000D                     	;# 
   235  000E                     	;# 
   236  000E                     	;# 
   237  000F                     	;# 
   238  0010                     	;# 
   239  0011                     	;# 
   240  0012                     	;# 
   241  0013                     	;# 
   242  0014                     	;# 
   243  0015                     	;# 
   244  0015                     	;# 
   245  0016                     	;# 
   246  0017                     	;# 
   247  0018                     	;# 
   248  0019                     	;# 
   249  001A                     	;# 
   250  001B                     	;# 
   251  001B                     	;# 
   252  001C                     	;# 
   253  001D                     	;# 
   254  001E                     	;# 
   255  001F                     	;# 
   256  0081                     	;# 
   257  0085                     	;# 
   258  0086                     	;# 
   259  0087                     	;# 
   260  0088                     	;# 
   261  0089                     	;# 
   262  008C                     	;# 
   263  008D                     	;# 
   264  008E                     	;# 
   265  008F                     	;# 
   266  0090                     	;# 
   267  0091                     	;# 
   268  0092                     	;# 
   269  0093                     	;# 
   270  0093                     	;# 
   271  0093                     	;# 
   272  0094                     	;# 
   273  0095                     	;# 
   274  0096                     	;# 
   275  0097                     	;# 
   276  0098                     	;# 
   277  0099                     	;# 
   278  009A                     	;# 
   279  009B                     	;# 
   280  009C                     	;# 
   281  009D                     	;# 
   282  009E                     	;# 
   283  009F                     	;# 
   284  0105                     	;# 
   285  0107                     	;# 
   286  0108                     	;# 
   287  0109                     	;# 
   288  010C                     	;# 
   289  010C                     	;# 
   290  010D                     	;# 
   291  010E                     	;# 
   292  010F                     	;# 
   293  0185                     	;# 
   294  0187                     	;# 
   295  0188                     	;# 
   296  0189                     	;# 
   297  018C                     	;# 
   298  018D                     	;# 
   299  0000                     	;# 
   300  0001                     	;# 
   301  0002                     	;# 
   302  0003                     	;# 
   303  0004                     	;# 
   304  0005                     	;# 
   305  0006                     	;# 
   306  0007                     	;# 
   307  0008                     	;# 
   308  0009                     	;# 
   309  000A                     	;# 
   310  000B                     	;# 
   311  000C                     	;# 
   312  000D                     	;# 
   313  000E                     	;# 
   314  000E                     	;# 
   315  000F                     	;# 
   316  0010                     	;# 
   317  0011                     	;# 
   318  0012                     	;# 
   319  0013                     	;# 
   320  0014                     	;# 
   321  0015                     	;# 
   322  0015                     	;# 
   323  0016                     	;# 
   324  0017                     	;# 
   325  0018                     	;# 
   326  0019                     	;# 
   327  001A                     	;# 
   328  001B                     	;# 
   329  001B                     	;# 
   330  001C                     	;# 
   331  001D                     	;# 
   332  001E                     	;# 
   333  001F                     	;# 
   334  0081                     	;# 
   335  0085                     	;# 
   336  0086                     	;# 
   337  0087                     	;# 
   338  0088                     	;# 
   339  0089                     	;# 
   340  008C                     	;# 
   341  008D                     	;# 
   342  008E                     	;# 
   343  008F                     	;# 
   344  0090                     	;# 
   345  0091                     	;# 
   346  0092                     	;# 
   347  0093                     	;# 
   348  0093                     	;# 
   349  0093                     	;# 
   350  0094                     	;# 
   351  0095                     	;# 
   352  0096                     	;# 
   353  0097                     	;# 
   354  0098                     	;# 
   355  0099                     	;# 
   356  009A                     	;# 
   357  009B                     	;# 
   358  009C                     	;# 
   359  009D                     	;# 
   360  009E                     	;# 
   361  009F                     	;# 
   362  0105                     	;# 
   363  0107                     	;# 
   364  0108                     	;# 
   365  0109                     	;# 
   366  010C                     	;# 
   367  010C                     	;# 
   368  010D                     	;# 
   369  010E                     	;# 
   370  010F                     	;# 
   371  0185                     	;# 
   372  0187                     	;# 
   373  0188                     	;# 
   374  0189                     	;# 
   375  018C                     	;# 
   376  018D                     	;# 
   377  0000                     	;# 
   378  0001                     	;# 
   379  0002                     	;# 
   380  0003                     	;# 
   381  0004                     	;# 
   382  0005                     	;# 
   383  0006                     	;# 
   384  0007                     	;# 
   385  0008                     	;# 
   386  0009                     	;# 
   387  000A                     	;# 
   388  000B                     	;# 
   389  000C                     	;# 
   390  000D                     	;# 
   391  000E                     	;# 
   392  000E                     	;# 
   393  000F                     	;# 
   394  0010                     	;# 
   395  0011                     	;# 
   396  0012                     	;# 
   397  0013                     	;# 
   398  0014                     	;# 
   399  0015                     	;# 
   400  0015                     	;# 
   401  0016                     	;# 
   402  0017                     	;# 
   403  0018                     	;# 
   404  0019                     	;# 
   405  001A                     	;# 
   406  001B                     	;# 
   407  001B                     	;# 
   408  001C                     	;# 
   409  001D                     	;# 
   410  001E                     	;# 
   411  001F                     	;# 
   412  0081                     	;# 
   413  0085                     	;# 
   414  0086                     	;# 
   415  0087                     	;# 
   416  0088                     	;# 
   417  0089                     	;# 
   418  008C                     	;# 
   419  008D                     	;# 
   420  008E                     	;# 
   421  008F                     	;# 
   422  0090                     	;# 
   423  0091                     	;# 
   424  0092                     	;# 
   425  0093                     	;# 
   426  0093                     	;# 
   427  0093                     	;# 
   428  0094                     	;# 
   429  0095                     	;# 
   430  0096                     	;# 
   431  0097                     	;# 
   432  0098                     	;# 
   433  0099                     	;# 
   434  009A                     	;# 
   435  009B                     	;# 
   436  009C                     	;# 
   437  009D                     	;# 
   438  009E                     	;# 
   439  009F                     	;# 
   440  0105                     	;# 
   441  0107                     	;# 
   442  0108                     	;# 
   443  0109                     	;# 
   444  010C                     	;# 
   445  010C                     	;# 
   446  010D                     	;# 
   447  010E                     	;# 
   448  010F                     	;# 
   449  0185                     	;# 
   450  0187                     	;# 
   451  0188                     	;# 
   452  0189                     	;# 
   453  018C                     	;# 
   454  018D                     	;# 
   455  0000                     	;# 
   456  0001                     	;# 
   457  0002                     	;# 
   458  0003                     	;# 
   459  0004                     	;# 
   460  0005                     	;# 
   461  0006                     	;# 
   462  0007                     	;# 
   463  0008                     	;# 
   464  0009                     	;# 
   465  000A                     	;# 
   466  000B                     	;# 
   467  000C                     	;# 
   468  000D                     	;# 
   469  000E                     	;# 
   470  000E                     	;# 
   471  000F                     	;# 
   472  0010                     	;# 
   473  0011                     	;# 
   474  0012                     	;# 
   475  0013                     	;# 
   476  0014                     	;# 
   477  0015                     	;# 
   478  0015                     	;# 
   479  0016                     	;# 
   480  0017                     	;# 
   481  0018                     	;# 
   482  0019                     	;# 
   483  001A                     	;# 
   484  001B                     	;# 
   485  001B                     	;# 
   486  001C                     	;# 
   487  001D                     	;# 
   488  001E                     	;# 
   489  001F                     	;# 
   490  0081                     	;# 
   491  0085                     	;# 
   492  0086                     	;# 
   493  0087                     	;# 
   494  0088                     	;# 
   495  0089                     	;# 
   496  008C                     	;# 
   497  008D                     	;# 
   498  008E                     	;# 
   499  008F                     	;# 
   500  0090                     	;# 
   501  0091                     	;# 
   502  0092                     	;# 
   503  0093                     	;# 
   504  0093                     	;# 
   505  0093                     	;# 
   506  0094                     	;# 
   507  0095                     	;# 
   508  0096                     	;# 
   509  0097                     	;# 
   510  0098                     	;# 
   511  0099                     	;# 
   512  009A                     	;# 
   513  009B                     	;# 
   514  009C                     	;# 
   515  009D                     	;# 
   516  009E                     	;# 
   517  009F                     	;# 
   518  0105                     	;# 
   519  0107                     	;# 
   520  0108                     	;# 
   521  0109                     	;# 
   522  010C                     	;# 
   523  010C                     	;# 
   524  010D                     	;# 
   525  010E                     	;# 
   526  010F                     	;# 
   527  0185                     	;# 
   528  0187                     	;# 
   529  0188                     	;# 
   530  0189                     	;# 
   531  018C                     	;# 
   532  018D                     	;# 
   533                           
   534                           	psect	idataBANK0
   535  05AE                     __pidataBANK0:	
   536                           
   537                           ;initializer for Counting@T
   538  05AE  3401               	retlw	1
   539                           
   540                           ;initializer for Counting@s4
   541  05AF  341E               	retlw	30
   542                           
   543                           ;initializer for Counting@s3
   544  05B0  3414               	retlw	20
   545                           
   546                           ;initializer for Counting@s2
   547  05B1  340A               	retlw	10
   548                           
   549                           ;initializer for Counting@s1
   550  05B2  340A               	retlw	10
   551                           
   552                           ;initializer for _Seg
   553  05B3  3401               	retlw	1
   554  05B4  3402               	retlw	2
   555  05B5  3403               	retlw	3
   556  05B6  3404               	retlw	4
   557  05B7  3402               	retlw	2
   558  05B8  3404               	retlw	4
   559  05B9  3402               	retlw	2
   560  05BA  3404               	retlw	4
   561  05BB  3400               	retlw	0
   562  05BC  3400               	retlw	0
   563                           
   564                           	psect	strings
   565  0500                     __pstrings:	
   566  0500                     stringtab:	
   567  0500                     __stringtab:	
   568  0500                     stringcode:	
   569                           ;	String table - string pointers are 1 byte each
   570                           
   571  0500                     stringdir:	
   572  0500  3005               	movlw	high stringdir
   573  0501  008A               	movwf	10
   574  0502  0804               	movf	4,w
   575  0503  0A84               	incf	4,f
   576  0504  0782               	addwf	2,f
   577  0505                     __stringbase:	
   578  0505  3400               	retlw	0
   579  0506                     __end_of__stringtab:	
   580  0506                     _SegTab:	
   581  0506  343F               	retlw	63
   582  0507  3406               	retlw	6
   583  0508  345B               	retlw	91
   584  0509  344F               	retlw	79
   585  050A  3466               	retlw	102
   586  050B  346D               	retlw	109
   587  050C  347D               	retlw	125
   588  050D  3407               	retlw	7
   589  050E  347F               	retlw	127
   590  050F  346F               	retlw	111
   591  0510  3477               	retlw	119
   592  0511  347C               	retlw	124
   593  0512  3458               	retlw	88
   594  0513  345E               	retlw	94
   595  0514  3479               	retlw	121
   596  0515  3471               	retlw	113
   597  0516                     __end_of_SegTab:	
   598  0516                     _VIP_PrioTab:	
   599  0516  3400               	retlw	0
   600  0517  3404               	retlw	4
   601  0518  3405               	retlw	5
   602  0519  3405               	retlw	5
   603  051A  3406               	retlw	6
   604  051B  3406               	retlw	6
   605  051C  3406               	retlw	6
   606  051D  3406               	retlw	6
   607  051E  3407               	retlw	7
   608  051F  3407               	retlw	7
   609  0520  3407               	retlw	7
   610  0521  3407               	retlw	7
   611  0522  3407               	retlw	7
   612  0523  3407               	retlw	7
   613  0524  3407               	retlw	7
   614  0525  3407               	retlw	7
   615  0526                     __end_of_VIP_PrioTab:	
   616  000B                     _INTCON	set	11
   617  000C                     _PIR1	set	12
   618  0012                     _T2CON	set	18
   619  0008                     _PORTD	set	8
   620  0007                     _PORTC	set	7
   621  0005                     _PORTA	set	5
   622  0006                     _PORTB	set	6
   623  000B                     _INTCONbits	set	11
   624  008C                     _PIE1	set	140
   625  0092                     _PR2	set	146
   626  008F                     _OSCCON	set	143
   627  0095                     _WPUB	set	149
   628  0081                     _OPTION_REG	set	129
   629  0088                     _TRISD	set	136
   630  0085                     _TRISA	set	133
   631  0086                     _TRISB	set	134
   632  0087                     _TRISC	set	135
   633  0189                     _ANSELH	set	393
   634                           
   635                           ; #config settings
   636  0000                     
   637                           	psect	cinit
   638  000F                     start_initialization:	
   639  000F                     __initialization:	
   640                           
   641                           ; Initialize objects allocated to BANK0
   642  000F  1383               	bcf	3,7	;select IRP bank0
   643  0010  304F               	movlw	low (__pdataBANK0+15)
   644  0011  00FD               	movwf	btemp+-1
   645  0012  3005               	movlw	high __pidataBANK0
   646  0013  00FE               	movwf	btemp
   647  0014  30AE               	movlw	low __pidataBANK0
   648  0015  00FF               	movwf	btemp+1
   649  0016  3040               	movlw	low __pdataBANK0
   650  0017  0084               	movwf	4
   651  0018  120A  118A  2590   	fcall	init_ram0
   652                           
   653                           ; Clear objects allocated to BANK0
   654  001B  01B1               	clrf	__pbssBANK0& (0+127)
   655  001C  01B2               	clrf	(__pbssBANK0+1)& (0+127)
   656  001D  01B3               	clrf	(__pbssBANK0+2)& (0+127)
   657  001E  01B4               	clrf	(__pbssBANK0+3)& (0+127)
   658  001F  01B5               	clrf	(__pbssBANK0+4)& (0+127)
   659  0020  01B6               	clrf	(__pbssBANK0+5)& (0+127)
   660  0021  01B7               	clrf	(__pbssBANK0+6)& (0+127)
   661  0022  01B8               	clrf	(__pbssBANK0+7)& (0+127)
   662  0023  01B9               	clrf	(__pbssBANK0+8)& (0+127)
   663  0024  01BA               	clrf	(__pbssBANK0+9)& (0+127)
   664  0025  01BB               	clrf	(__pbssBANK0+10)& (0+127)
   665  0026  01BC               	clrf	(__pbssBANK0+11)& (0+127)
   666  0027  01BD               	clrf	(__pbssBANK0+12)& (0+127)
   667  0028  01BE               	clrf	(__pbssBANK0+13)& (0+127)
   668  0029  01BF               	clrf	(__pbssBANK0+14)& (0+127)
   669                           
   670                           ; Clear objects allocated to COMMON
   671  002A  01F8               	clrf	__pbssCOMMON& (0+127)
   672  002B  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   673  002C  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   674  002D                     end_of_initialization:	
   675                           ;End of C runtime variable initialization code
   676                           
   677  002D                     __end_of__initialization:	
   678  002D  0183               	clrf	3
   679  002E  120A  118A  2BFA   	ljmp	_main	;jump to C main() function
   680                           
   681                           	psect	bssCOMMON
   682  0078                     __pbssCOMMON:	
   683  0078                     _BlinkStatus:	
   684  0078                     	ds	1
   685  0079                     _LAT:	
   686  0079                     	ds	2
   687                           
   688                           	psect	bssBANK0
   689  0031                     __pbssBANK0:	
   690  0031                     _LED:	
   691  0031                     	ds	2
   692  0033                     Counting@S4:	
   693  0033                     	ds	1
   694  0034                     Counting@S3:	
   695  0034                     	ds	1
   696  0035                     Counting@S2:	
   697  0035                     	ds	1
   698  0036                     Counting@S1:	
   699  0036                     	ds	1
   700  0037                     Counting@j:	
   701  0037                     	ds	1
   702  0038                     Counting@i:	
   703  0038                     	ds	1
   704  0039                     LED_7SEGMENT_Update@BlinkCounter:	
   705  0039                     	ds	1
   706  003A                     LED_7SEGMENT_Update@State:	
   707  003A                     	ds	1
   708  003B                     _SegDigit:	
   709  003B                     	ds	1
   710  003C                     _Temp:	
   711  003C                     	ds	1
   712  003D                     _VIP:	
   713  003D                     	ds	1
   714  003E                     _reset:	
   715  003E                     	ds	1
   716  003F                     _SysTick:	
   717  003F                     	ds	1
   718                           
   719                           	psect	dataBANK0
   720  0040                     __pdataBANK0:	
   721  0040                     Counting@T:	
   722  0040                     	ds	1
   723  0041                     Counting@s4:	
   724  0041                     	ds	1
   725  0042                     Counting@s3:	
   726  0042                     	ds	1
   727  0043                     Counting@s2:	
   728  0043                     	ds	1
   729  0044                     Counting@s1:	
   730  0044                     	ds	1
   731  0045                     _Seg:	
   732  0045                     	ds	10
   733                           
   734                           	psect	inittext
   735  058C                     init_fetch0:	
   736                           ;	Called with low address in FSR and high address in W
   737                           
   738  058C  087E               	movf	126,w
   739  058D  008A               	movwf	10
   740  058E  087F               	movf	127,w
   741  058F  0082               	movwf	2
   742  0590                     init_ram0:	
   743                           ;Called with:
   744                           ;	high address of idata address in btemp 
   745                           ;	low address of idata address in btemp+1 
   746                           ;	low address of data in FSR
   747                           ;	high address + 1 of data in btemp-1
   748                           
   749  0590  258C  120A  118A   	fcall	init_fetch0
   750  0593  0080               	movwf	0
   751  0594  0A84               	incf	4,f
   752  0595  0804               	movf	4,w
   753  0596  067D               	xorwf	125,w
   754  0597  1903               	btfsc	3,2
   755  0598  3400               	retlw	0
   756  0599  0AFF               	incf	127,f
   757  059A  1903               	btfsc	3,2
   758  059B  0AFE               	incf	126,f
   759  059C  2D90               	goto	init_ram0
   760                           
   761                           	psect	cstackCOMMON
   762  0070                     __pcstackCOMMON:	
   763  0070                     ?_PORT_Init:	
   764  0070                     ?_TMR2_Interrupt:	
   765                           ; 1 bytes @ 0x0
   766                           
   767  0070                     ?_TMR2_ON:	
   768                           ; 1 bytes @ 0x0
   769                           
   770  0070                     ?_Clr_LED:	
   771                           ; 1 bytes @ 0x0
   772                           
   773  0070                     ?_Counting:	
   774                           ; 1 bytes @ 0x0
   775                           
   776  0070                     ?_LED_7SEGMENT_Update:	
   777                           ; 1 bytes @ 0x0
   778                           
   779  0070                     ?_Latch_Traffic_LED:	
   780                           ; 1 bytes @ 0x0
   781                           
   782  0070                     ?_VIP_mode:	
   783                           ; 1 bytes @ 0x0
   784                           
   785  0070                     ?_TMR2_GetIntFlag:	
   786                           ; 1 bytes @ 0x0
   787                           
   788  0070                     ??_TMR2_GetIntFlag:	
   789                           ; 1 bytes @ 0x0
   790                           
   791  0070                     ?_TMR2_ClearIntFlag:	
   792                           ; 1 bytes @ 0x0
   793                           
   794  0070                     ??_TMR2_ClearIntFlag:	
   795                           ; 1 bytes @ 0x0
   796                           
   797  0070                     ?_main:	
   798                           ; 1 bytes @ 0x0
   799                           
   800  0070                     ?_ISR:	
   801                           ; 1 bytes @ 0x0
   802                           
   803                           
   804                           ; 1 bytes @ 0x0
   805  0070                     	ds	1
   806  0071                     ??_ISR:	
   807                           
   808                           ; 1 bytes @ 0x1
   809  0071                     	ds	2
   810  0073                     ??_PORT_Init:	
   811  0073                     ?_TMR2_Setup:	
   812                           ; 1 bytes @ 0x3
   813                           
   814  0073                     ??_TMR2_Interrupt:	
   815                           ; 1 bytes @ 0x3
   816                           
   817  0073                     ??_TMR2_ON:	
   818                           ; 1 bytes @ 0x3
   819                           
   820  0073                     ??_Clr_LED:	
   821                           ; 1 bytes @ 0x3
   822                           
   823  0073                     ??_LED_7SEGMENT_Update:	
   824                           ; 1 bytes @ 0x3
   825                           
   826  0073                     ?_Traffic_Light:	
   827                           ; 1 bytes @ 0x3
   828                           
   829  0073                     ??_Latch_Traffic_LED:	
   830                           ; 1 bytes @ 0x3
   831                           
   832  0073                     ?_Sec2Time:	
   833                           ; 1 bytes @ 0x3
   834                           
   835  0073                     TMR2_Setup@presc:	
   836                           ; 1 bytes @ 0x3
   837                           
   838  0073                     Sec2Time@t2:	
   839                           ; 1 bytes @ 0x3
   840                           
   841  0073                     Traffic_Light@led:	
   842                           ; 1 bytes @ 0x3
   843                           
   844                           
   845                           ; 2 bytes @ 0x3
   846  0073                     	ds	1
   847  0074                     TMR2_Setup@postsc:	
   848  0074                     TMR2_Interrupt@En:	
   849                           ; 1 bytes @ 0x4
   850                           
   851  0074                     Sec2Time@t3:	
   852                           ; 1 bytes @ 0x4
   853                           
   854                           
   855                           ; 1 bytes @ 0x4
   856  0074                     	ds	1
   857  0075                     ??_TMR2_Setup:	
   858  0075                     ??_Traffic_Light:	
   859                           ; 1 bytes @ 0x5
   860                           
   861  0075                     LED_7SEGMENT_Update@val:	
   862                           ; 1 bytes @ 0x5
   863                           
   864  0075                     Latch_Traffic_LED@LATptr:	
   865                           ; 1 bytes @ 0x5
   866                           
   867  0075                     Sec2Time@t4:	
   868                           ; 1 bytes @ 0x5
   869                           
   870                           
   871                           ; 1 bytes @ 0x5
   872  0075                     	ds	1
   873  0076                     ??_VIP_mode:	
   874  0076                     ??_Sec2Time:	
   875                           ; 1 bytes @ 0x6
   876                           
   877                           
   878                           ; 1 bytes @ 0x6
   879  0076                     	ds	1
   880  0077                     TMR2_Setup@period:	
   881                           
   882                           ; 1 bytes @ 0x7
   883  0077                     	ds	1
   884                           
   885                           	psect	cstackBANK0
   886  0020                     __pcstackBANK0:	
   887  0020                     Sec2Time@t1:	
   888  0020                     VIP_mode@i:	
   889                           ; 1 bytes @ 0x0
   890                           
   891                           
   892                           ; 1 bytes @ 0x0
   893  0020                     	ds	1
   894  0021                     Sec2Time@k:	
   895                           
   896                           ; 1 bytes @ 0x1
   897  0021                     	ds	1
   898  0022                     ??_Counting:	
   899                           
   900                           ; 1 bytes @ 0x2
   901  0022                     	ds	3
   902  0025                     _Counting$252:	
   903                           
   904                           ; 2 bytes @ 0x5
   905  0025                     	ds	2
   906  0027                     _Counting$253:	
   907                           
   908                           ; 2 bytes @ 0x7
   909  0027                     	ds	2
   910  0029                     _Counting$254:	
   911                           
   912                           ; 2 bytes @ 0x9
   913  0029                     	ds	2
   914  002B                     _Counting$255:	
   915                           
   916                           ; 2 bytes @ 0xB
   917  002B                     	ds	2
   918  002D                     _Counting$256:	
   919                           
   920                           ; 2 bytes @ 0xD
   921  002D                     	ds	2
   922  002F                     ??_main:	
   923                           
   924                           ; 1 bytes @ 0xF
   925  002F                     	ds	2
   926                           
   927                           	psect	maintext
   928  03FA                     __pmaintext:	
   929 ;;
   930 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   931 ;;
   932 ;; *************** function _main *****************
   933 ;; Defined at:
   934 ;;		line 30 in file "main.c"
   935 ;; Parameters:    Size  Location     Type
   936 ;;		None
   937 ;; Auto vars:     Size  Location     Type
   938 ;;		None
   939 ;; Return value:  Size  Location     Type
   940 ;;                  1    wreg      void 
   941 ;; Registers used:
   942 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   943 ;; Tracked objects:
   944 ;;		On entry : B00/0
   945 ;;		On exit  : 0/0
   946 ;;		Unchanged: 0/0
   947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   948 ;;      Params:         0       0       0       0       0
   949 ;;      Locals:         0       0       0       0       0
   950 ;;      Temps:          0       2       0       0       0
   951 ;;      Totals:         0       2       0       0       0
   952 ;;Total ram usage:        2 bytes
   953 ;; Hardware stack levels required when called:    4
   954 ;; This function calls:
   955 ;;		_Clr_LED
   956 ;;		_Counting
   957 ;;		_LED_7SEGMENT_Update
   958 ;;		_Latch_Traffic_LED
   959 ;;		_PORT_Init
   960 ;;		_TMR2_Interrupt
   961 ;;		_TMR2_ON
   962 ;;		_TMR2_Setup
   963 ;;		_Traffic_Light
   964 ;;		_VIP_mode
   965 ;; This function is called by:
   966 ;;		Startup code after reset
   967 ;; This function uses a non-reentrant model
   968 ;;
   969                           
   970                           
   971                           ;psect for function _main
   972  03FA                     _main:	
   973                           
   974                           ;main.c: 32:     PORT_Init();
   975                           
   976                           ;incstack = 0
   977                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   978  03FA  120A  118A  2526  120A  118A  	fcall	_PORT_Init
   979                           
   980                           ;main.c: 33:     TMR2_Setup(250,4,5);
   981  03FF  3004               	movlw	4
   982  0400  1283               	bcf	3,5	;RP0=0, select bank0
   983  0401  1303               	bcf	3,6	;RP1=0, select bank0
   984  0402  00AF               	movwf	??_main
   985  0403  082F               	movf	??_main,w
   986  0404  00F3               	movwf	TMR2_Setup@presc
   987  0405  3005               	movlw	5
   988  0406  00B0               	movwf	??_main+1
   989  0407  0830               	movf	??_main+1,w
   990  0408  00F4               	movwf	TMR2_Setup@postsc
   991  0409  30FA               	movlw	250
   992  040A  120A  118A  24BC  120A  118A  	fcall	_TMR2_Setup
   993                           
   994                           ;main.c: 34:     TMR2_Interrupt(1);
   995  040F  3001               	movlw	1
   996  0410  120A  118A  2576  120A  118A  	fcall	_TMR2_Interrupt
   997                           
   998                           ;main.c: 35:     TMR2_ON();
   999  0415  120A  118A  25CC  120A  118A  	fcall	_TMR2_ON
  1000                           
  1001                           ;main.c: 36:     (INTCONbits.GIE = 1);
  1002  041A  178B               	bsf	11,7	;volatile
  1003                           
  1004                           ;main.c: 37:     SysTick.On_Off=ON;
  1005  041B  1283               	bcf	3,5	;RP0=0, select bank0
  1006  041C  1303               	bcf	3,6	;RP1=0, select bank0
  1007  041D  143F               	bsf	_SysTick,0
  1008  041E                     l74:	
  1009                           ;main.c: 41:             ;
  1010                           
  1011                           
  1012                           ;main.c: 40:         while(SysTick.On_Off)
  1013  041E  183F               	btfsc	_SysTick,0
  1014  041F  2C1E               	goto	l74
  1015                           
  1016                           ;main.c: 42:           SysTick.On_Off=ON;
  1017  0420  143F               	bsf	_SysTick,0
  1018                           
  1019                           ;main.c: 44:          Clr_LED();
  1020  0421  120A  118A  25D0  120A  118A  	fcall	_Clr_LED
  1021                           
  1022                           ;main.c: 45:          Counting();
  1023  0426  120A  118A  2031  120A  118A  	fcall	_Counting
  1024                           
  1025                           ;main.c: 46:         LED_7SEGMENT_Update(Seg);
  1026  042B  3045               	movlw	(low (_Seg| 0))& (0+255)
  1027  042C  120A  118A  21AA  120A  118A  	fcall	_LED_7SEGMENT_Update
  1028                           
  1029                           ;main.c: 47:         Traffic_Light(LED);
  1030  0431  1283               	bcf	3,5	;RP0=0, select bank0
  1031  0432  1303               	bcf	3,6	;RP1=0, select bank0
  1032  0433  0832               	movf	_LED+1,w
  1033  0434  00F4               	movwf	Traffic_Light@led+1
  1034  0435  0831               	movf	_LED,w
  1035  0436  00F3               	movwf	Traffic_Light@led
  1036  0437  120A  118A  2545  120A  118A  	fcall	_Traffic_Light
  1037                           
  1038                           ;main.c: 48:         Latch_Traffic_LED(&LAT);
  1039  043C  3079               	movlw	(low (_LAT| 0))& (0+255)
  1040  043D  120A  118A  259D  120A  118A  	fcall	_Latch_Traffic_LED
  1041                           
  1042                           ;main.c: 49:         Temp=0X00;
  1043  0442  1283               	bcf	3,5	;RP0=0, select bank0
  1044  0443  1303               	bcf	3,6	;RP1=0, select bank0
  1045  0444  01BC               	clrf	_Temp
  1046                           
  1047                           ;main.c: 50:         Temp|=~(PORTB>>4);
  1048  0445  0806               	movf	6,w	;volatile
  1049  0446  00AF               	movwf	??_main
  1050  0447  3004               	movlw	4
  1051  0448                     u2265:	
  1052  0448  1003               	clrc
  1053  0449  0CAF               	rrf	??_main,f
  1054  044A  3EFF               	addlw	-1
  1055  044B  1D03               	skipz
  1056  044C  2C48               	goto	u2265
  1057  044D  082F               	movf	??_main,w
  1058  044E  3AFF               	xorlw	255
  1059  044F  00B0               	movwf	??_main+1
  1060  0450  0830               	movf	??_main+1,w
  1061  0451  04BC               	iorwf	_Temp,f
  1062                           
  1063                           ;main.c: 51:         Temp&=0X0F;
  1064  0452  300F               	movlw	15
  1065  0453  00AF               	movwf	??_main
  1066  0454  082F               	movf	??_main,w
  1067  0455  05BC               	andwf	_Temp,f
  1068                           
  1069                           ;main.c: 52:         VIP=VIP_PrioTab[Temp];
  1070  0456  083C               	movf	_Temp,w
  1071  0457  3E11               	addlw	low ((_VIP_PrioTab-__stringbase)| (0+32768))
  1072  0458  0084               	movwf	4
  1073  0459  120A  118A  2500  120A  118A  	fcall	stringdir
  1074  045E  00AF               	movwf	??_main
  1075  045F  082F               	movf	??_main,w
  1076  0460  00BD               	movwf	_VIP
  1077                           
  1078                           ;main.c: 53:         if(VIP)
  1079  0461  083D               	movf	_VIP,w
  1080  0462  1903               	btfsc	3,2
  1081  0463  2C69               	goto	l2608
  1082                           
  1083                           ;main.c: 54:             VIP_mode();
  1084  0464  120A  118A  22EE  120A  118A  	fcall	_VIP_mode
  1085  0469                     l2608:	
  1086                           
  1087                           ;main.c: 55:         Seg[9]=Seg[8]=0;
  1088  0469  1283               	bcf	3,5	;RP0=0, select bank0
  1089  046A  1303               	bcf	3,6	;RP1=0, select bank0
  1090  046B  01CD               	clrf	_Seg+8
  1091  046C  01CE               	clrf	_Seg+9
  1092  046D  2C1E               	goto	l74
  1093  046E                     __end_of_main:	
  1094                           
  1095                           	psect	text1
  1096  02EE                     __ptext1:	
  1097 ;; *************** function _VIP_mode *****************
  1098 ;; Defined at:
  1099 ;;		line 6 in file "VIP_MODE.c"
  1100 ;; Parameters:    Size  Location     Type
  1101 ;;		None
  1102 ;; Auto vars:     Size  Location     Type
  1103 ;;  i               1    0[BANK0 ] unsigned char 
  1104 ;; Return value:  Size  Location     Type
  1105 ;;                  1    wreg      void 
  1106 ;; Registers used:
  1107 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1108 ;; Tracked objects:
  1109 ;;		On entry : 0/0
  1110 ;;		On exit  : 0/0
  1111 ;;		Unchanged: 0/0
  1112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1113 ;;      Params:         0       0       0       0       0
  1114 ;;      Locals:         0       1       0       0       0
  1115 ;;      Temps:          2       0       0       0       0
  1116 ;;      Totals:         2       1       0       0       0
  1117 ;;Total ram usage:        3 bytes
  1118 ;; Hardware stack levels used:    1
  1119 ;; Hardware stack levels required when called:    3
  1120 ;; This function calls:
  1121 ;;		_Clr_LED
  1122 ;;		_LED_7SEGMENT_Update
  1123 ;;		_Latch_Traffic_LED
  1124 ;; This function is called by:
  1125 ;;		_main
  1126 ;; This function uses a non-reentrant model
  1127 ;;
  1128                           
  1129                           
  1130                           ;psect for function _VIP_mode
  1131  02EE                     _VIP_mode:	
  1132                           
  1133                           ;VIP_MODE.c: 7:   for(char i=0;i<=8;i++)
  1134                           
  1135                           ;incstack = 0
  1136                           ; Regs used in _VIP_mode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1137  02EE  1283               	bcf	3,5	;RP0=0, select bank0
  1138  02EF  1303               	bcf	3,6	;RP1=0, select bank0
  1139  02F0  01A0               	clrf	VIP_mode@i
  1140  02F1                     l2464:	
  1141                           
  1142                           ;VIP_MODE.c: 8:        Seg[i]=0;
  1143  02F1  0820               	movf	VIP_mode@i,w
  1144  02F2  3E45               	addlw	(low (_Seg| 0))& (0+255)
  1145  02F3  0084               	movwf	4
  1146  02F4  1383               	bcf	3,7	;select IRP bank0
  1147  02F5  0180               	clrf	0
  1148  02F6  3001               	movlw	1
  1149  02F7  00F6               	movwf	??_VIP_mode
  1150  02F8  0876               	movf	??_VIP_mode,w
  1151  02F9  07A0               	addwf	VIP_mode@i,f
  1152  02FA  3009               	movlw	9
  1153  02FB  0220               	subwf	VIP_mode@i,w
  1154  02FC  1C03               	skipc
  1155  02FD  2AF1               	goto	l2464
  1156                           
  1157                           ;VIP_MODE.c: 9:        Seg[9]=1;
  1158  02FE  01CE               	clrf	_Seg+9
  1159  02FF  0ACE               	incf	_Seg+9,f
  1160                           
  1161                           ;VIP_MODE.c: 10:        Seg[8]=1;
  1162  0300  01CD               	clrf	_Seg+8
  1163  0301  0ACD               	incf	_Seg+8,f
  1164  0302                     l2494:	
  1165                           ;VIP_MODE.c: 11:     while(VIP==4)
  1166                           
  1167                           
  1168                           ;VIP_MODE.c: 11:     while(VIP==4)
  1169  0302  3004               	movlw	4
  1170  0303  063D               	xorwf	_VIP,w
  1171  0304  1D03               	btfss	3,2
  1172  0305  2B79               	goto	l2520
  1173  0306                     l348:	
  1174                           ;VIP_MODE.c: 14:             ;
  1175                           
  1176                           
  1177                           ;VIP_MODE.c: 13:         while(SysTick.On_Off)
  1178  0306  183F               	btfsc	_SysTick,0
  1179  0307  2B06               	goto	l348
  1180                           
  1181                           ;VIP_MODE.c: 15:         SysTick.On_Off=ON;
  1182  0308  143F               	bsf	_SysTick,0
  1183                           
  1184                           ;VIP_MODE.c: 16:         Clr_LED();
  1185  0309  120A  118A  25D0  120A  118A  	fcall	_Clr_LED
  1186                           
  1187                           ;VIP_MODE.c: 17:         LED_7SEGMENT_Update(Seg);
  1188  030E  3045               	movlw	(low (_Seg| 0))& (0+255)
  1189  030F  120A  118A  21AA  120A  118A  	fcall	_LED_7SEGMENT_Update
  1190                           
  1191                           ;VIP_MODE.c: 18:         ((TrafficLight*)&LAT)->LED.t1green=1;
  1192  0314  1579               	bsf	_LAT,2
  1193                           
  1194                           ;VIP_MODE.c: 19:         ((TrafficLight*)&LAT)->LED.t2red=1;
  1195  0315  15F9               	bsf	_LAT,3
  1196                           
  1197                           ;VIP_MODE.c: 20:         ((TrafficLight*)&LAT)->LED.t3red=1;
  1198  0316  1779               	bsf	_LAT,6
  1199                           
  1200                           ;VIP_MODE.c: 21:         ((TrafficLight*)&LAT)->LED.t4red=1;
  1201  0317  14FA               	bsf	_LAT+1,1
  1202                           
  1203                           ;VIP_MODE.c: 22:         Latch_Traffic_LED(&LAT);
  1204  0318  3079               	movlw	(low (_LAT| 0))& (0+255)
  1205  0319  120A  118A  259D  120A  118A  	fcall	_Latch_Traffic_LED
  1206                           
  1207                           ;VIP_MODE.c: 23:         Temp=0X00;
  1208  031E  1283               	bcf	3,5	;RP0=0, select bank0
  1209  031F  1303               	bcf	3,6	;RP1=0, select bank0
  1210  0320  01BC               	clrf	_Temp
  1211                           
  1212                           ;VIP_MODE.c: 24:         Temp|=~(PORTB>>4);
  1213  0321  0806               	movf	6,w	;volatile
  1214  0322  00F6               	movwf	??_VIP_mode
  1215  0323  3004               	movlw	4
  1216  0324                     u2145:	
  1217  0324  1003               	clrc
  1218  0325  0CF6               	rrf	??_VIP_mode,f
  1219  0326  3EFF               	addlw	-1
  1220  0327  1D03               	skipz
  1221  0328  2B24               	goto	u2145
  1222  0329  0876               	movf	??_VIP_mode,w
  1223  032A  3AFF               	xorlw	255
  1224  032B  00F7               	movwf	??_VIP_mode+1
  1225  032C  0877               	movf	??_VIP_mode+1,w
  1226  032D  04BC               	iorwf	_Temp,f
  1227                           
  1228                           ;VIP_MODE.c: 25:         Temp|=0X0F;
  1229  032E  300F               	movlw	15
  1230  032F  00F6               	movwf	??_VIP_mode
  1231  0330  0876               	movf	??_VIP_mode,w
  1232  0331  04BC               	iorwf	_Temp,f
  1233                           
  1234                           ;VIP_MODE.c: 26:         VIP=VIP_PrioTab[Temp];
  1235  0332  083C               	movf	_Temp,w
  1236  0333  3E11               	addlw	low ((_VIP_PrioTab-__stringbase)| (0+32768))
  1237  0334  0084               	movwf	4
  1238  0335  120A  118A  2500  120A  118A  	fcall	stringdir
  1239  033A  00F6               	movwf	??_VIP_mode
  1240  033B  0876               	movf	??_VIP_mode,w
  1241  033C  00BD               	movwf	_VIP
  1242                           
  1243                           ;VIP_MODE.c: 27:         reset=1;
  1244  033D  01BE               	clrf	_reset
  1245  033E  0ABE               	incf	_reset,f
  1246  033F  2B02               	goto	l2494
  1247  0340                     l354:	
  1248                           ;VIP_MODE.c: 32:             ;
  1249                           
  1250                           
  1251                           ;VIP_MODE.c: 31:          while(SysTick.On_Off)
  1252  0340  183F               	btfsc	_SysTick,0
  1253  0341  2B40               	goto	l354
  1254                           
  1255                           ;VIP_MODE.c: 33:         SysTick.On_Off=ON;
  1256  0342  143F               	bsf	_SysTick,0
  1257                           
  1258                           ;VIP_MODE.c: 34:         Clr_LED();
  1259  0343  120A  118A  25D0  120A  118A  	fcall	_Clr_LED
  1260                           
  1261                           ;VIP_MODE.c: 35:         LED_7SEGMENT_Update(Seg);
  1262  0348  3045               	movlw	(low (_Seg| 0))& (0+255)
  1263  0349  120A  118A  21AA  120A  118A  	fcall	_LED_7SEGMENT_Update
  1264                           
  1265                           ;VIP_MODE.c: 36:         ((TrafficLight*)&LAT)->LED.t2green=1;
  1266  034E  16F9               	bsf	_LAT,5
  1267                           
  1268                           ;VIP_MODE.c: 37:         ((TrafficLight*)&LAT)->LED.t1red=1;
  1269  034F  1479               	bsf	_LAT,0
  1270                           
  1271                           ;VIP_MODE.c: 38:         ((TrafficLight*)&LAT)->LED.t3red=1;
  1272  0350  1779               	bsf	_LAT,6
  1273                           
  1274                           ;VIP_MODE.c: 39:         ((TrafficLight*)&LAT)->LED.t4red=1;
  1275  0351  14FA               	bsf	_LAT+1,1
  1276                           
  1277                           ;VIP_MODE.c: 40:         Latch_Traffic_LED(&LAT);
  1278  0352  3079               	movlw	(low (_LAT| 0))& (0+255)
  1279  0353  120A  118A  259D  120A  118A  	fcall	_Latch_Traffic_LED
  1280                           
  1281                           ;VIP_MODE.c: 41:         Temp=0X00;
  1282  0358  1283               	bcf	3,5	;RP0=0, select bank0
  1283  0359  1303               	bcf	3,6	;RP1=0, select bank0
  1284  035A  01BC               	clrf	_Temp
  1285                           
  1286                           ;VIP_MODE.c: 42:         Temp|=~(PORTB>>4);
  1287  035B  0806               	movf	6,w	;volatile
  1288  035C  00F6               	movwf	??_VIP_mode
  1289  035D  3004               	movlw	4
  1290  035E                     u2175:	
  1291  035E  1003               	clrc
  1292  035F  0CF6               	rrf	??_VIP_mode,f
  1293  0360  3EFF               	addlw	-1
  1294  0361  1D03               	skipz
  1295  0362  2B5E               	goto	u2175
  1296  0363  0876               	movf	??_VIP_mode,w
  1297  0364  3AFF               	xorlw	255
  1298  0365  00F7               	movwf	??_VIP_mode+1
  1299  0366  0877               	movf	??_VIP_mode+1,w
  1300  0367  04BC               	iorwf	_Temp,f
  1301                           
  1302                           ;VIP_MODE.c: 43:         Temp|=0X0F;
  1303  0368  300F               	movlw	15
  1304  0369  00F6               	movwf	??_VIP_mode
  1305  036A  0876               	movf	??_VIP_mode,w
  1306  036B  04BC               	iorwf	_Temp,f
  1307                           
  1308                           ;VIP_MODE.c: 44:         VIP=VIP_PrioTab[Temp];
  1309  036C  083C               	movf	_Temp,w
  1310  036D  3E11               	addlw	low ((_VIP_PrioTab-__stringbase)| (0+32768))
  1311  036E  0084               	movwf	4
  1312  036F  120A  118A  2500  120A  118A  	fcall	stringdir
  1313  0374  00F6               	movwf	??_VIP_mode
  1314  0375  0876               	movf	??_VIP_mode,w
  1315  0376  00BD               	movwf	_VIP
  1316                           
  1317                           ;VIP_MODE.c: 45:         reset=1;
  1318  0377  01BE               	clrf	_reset
  1319  0378  0ABE               	incf	_reset,f
  1320  0379                     l2520:	
  1321                           
  1322                           ;VIP_MODE.c: 29:      while(VIP==5)
  1323  0379  3005               	movlw	5
  1324  037A  063D               	xorwf	_VIP,w
  1325  037B  1D03               	btfss	3,2
  1326  037C  2BB7               	goto	l2546
  1327  037D  2B40               	goto	l354
  1328  037E                     l360:	
  1329                           ;VIP_MODE.c: 50:             ;
  1330                           
  1331                           
  1332                           ;VIP_MODE.c: 49:         while(SysTick.On_Off)
  1333  037E  183F               	btfsc	_SysTick,0
  1334  037F  2B7E               	goto	l360
  1335                           
  1336                           ;VIP_MODE.c: 51:         SysTick.On_Off=ON;
  1337  0380  143F               	bsf	_SysTick,0
  1338                           
  1339                           ;VIP_MODE.c: 52:         Clr_LED();
  1340  0381  120A  118A  25D0  120A  118A  	fcall	_Clr_LED
  1341                           
  1342                           ;VIP_MODE.c: 53:         LED_7SEGMENT_Update(Seg);
  1343  0386  3045               	movlw	(low (_Seg| 0))& (0+255)
  1344  0387  120A  118A  21AA  120A  118A  	fcall	_LED_7SEGMENT_Update
  1345                           
  1346                           ;VIP_MODE.c: 54:         ((TrafficLight*)&LAT)->LED.t3green=1;
  1347  038C  147A               	bsf	_LAT+1,0
  1348                           
  1349                           ;VIP_MODE.c: 55:         ((TrafficLight*)&LAT)->LED.t1red=1;
  1350  038D  1479               	bsf	_LAT,0
  1351                           
  1352                           ;VIP_MODE.c: 56:         ((TrafficLight*)&LAT)->LED.t2red=1;
  1353  038E  15F9               	bsf	_LAT,3
  1354                           
  1355                           ;VIP_MODE.c: 57:         ((TrafficLight*)&LAT)->LED.t4red=1;
  1356  038F  14FA               	bsf	_LAT+1,1
  1357                           
  1358                           ;VIP_MODE.c: 58:         Latch_Traffic_LED(&LAT);
  1359  0390  3079               	movlw	(low (_LAT| 0))& (0+255)
  1360  0391  120A  118A  259D  120A  118A  	fcall	_Latch_Traffic_LED
  1361                           
  1362                           ;VIP_MODE.c: 59:         Temp=0X00;
  1363  0396  1283               	bcf	3,5	;RP0=0, select bank0
  1364  0397  1303               	bcf	3,6	;RP1=0, select bank0
  1365  0398  01BC               	clrf	_Temp
  1366                           
  1367                           ;VIP_MODE.c: 60:         Temp|=~(PORTB>>4);
  1368  0399  0806               	movf	6,w	;volatile
  1369  039A  00F6               	movwf	??_VIP_mode
  1370  039B  3004               	movlw	4
  1371  039C                     u2205:	
  1372  039C  1003               	clrc
  1373  039D  0CF6               	rrf	??_VIP_mode,f
  1374  039E  3EFF               	addlw	-1
  1375  039F  1D03               	skipz
  1376  03A0  2B9C               	goto	u2205
  1377  03A1  0876               	movf	??_VIP_mode,w
  1378  03A2  3AFF               	xorlw	255
  1379  03A3  00F7               	movwf	??_VIP_mode+1
  1380  03A4  0877               	movf	??_VIP_mode+1,w
  1381  03A5  04BC               	iorwf	_Temp,f
  1382                           
  1383                           ;VIP_MODE.c: 61:         Temp|=0X0F;
  1384  03A6  300F               	movlw	15
  1385  03A7  00F6               	movwf	??_VIP_mode
  1386  03A8  0876               	movf	??_VIP_mode,w
  1387  03A9  04BC               	iorwf	_Temp,f
  1388                           
  1389                           ;VIP_MODE.c: 62:         VIP=VIP_PrioTab[Temp];
  1390  03AA  083C               	movf	_Temp,w
  1391  03AB  3E11               	addlw	low ((_VIP_PrioTab-__stringbase)| (0+32768))
  1392  03AC  0084               	movwf	4
  1393  03AD  120A  118A  2500  120A  118A  	fcall	stringdir
  1394  03B2  00F6               	movwf	??_VIP_mode
  1395  03B3  0876               	movf	??_VIP_mode,w
  1396  03B4  00BD               	movwf	_VIP
  1397                           
  1398                           ;VIP_MODE.c: 63:         reset=1;
  1399  03B5  01BE               	clrf	_reset
  1400  03B6  0ABE               	incf	_reset,f
  1401  03B7                     l2546:	
  1402                           
  1403                           ;VIP_MODE.c: 47:    while(VIP==6)
  1404  03B7  3006               	movlw	6
  1405  03B8  063D               	xorwf	_VIP,w
  1406  03B9  1D03               	btfss	3,2
  1407  03BA  2BF5               	goto	l2572
  1408  03BB  2B7E               	goto	l360
  1409  03BC                     l366:	
  1410                           ;VIP_MODE.c: 68:             ;
  1411                           
  1412                           
  1413                           ;VIP_MODE.c: 67:         while(SysTick.On_Off)
  1414  03BC  183F               	btfsc	_SysTick,0
  1415  03BD  2BBC               	goto	l366
  1416                           
  1417                           ;VIP_MODE.c: 69:         SysTick.On_Off=ON;
  1418  03BE  143F               	bsf	_SysTick,0
  1419                           
  1420                           ;VIP_MODE.c: 70:         Clr_LED();
  1421  03BF  120A  118A  25D0  120A  118A  	fcall	_Clr_LED
  1422                           
  1423                           ;VIP_MODE.c: 71:         LED_7SEGMENT_Update(Seg);
  1424  03C4  3045               	movlw	(low (_Seg| 0))& (0+255)
  1425  03C5  120A  118A  21AA  120A  118A  	fcall	_LED_7SEGMENT_Update
  1426                           
  1427                           ;VIP_MODE.c: 72:         ((TrafficLight*)&LAT)->LED.t4green=1;
  1428  03CA  15FA               	bsf	_LAT+1,3
  1429                           
  1430                           ;VIP_MODE.c: 73:         ((TrafficLight*)&LAT)->LED.t2red=1;
  1431  03CB  15F9               	bsf	_LAT,3
  1432                           
  1433                           ;VIP_MODE.c: 74:         ((TrafficLight*)&LAT)->LED.t3red=1;
  1434  03CC  1779               	bsf	_LAT,6
  1435                           
  1436                           ;VIP_MODE.c: 75:         ((TrafficLight*)&LAT)->LED.t1red=1;
  1437  03CD  1479               	bsf	_LAT,0
  1438                           
  1439                           ;VIP_MODE.c: 76:         Latch_Traffic_LED(&LAT);
  1440  03CE  3079               	movlw	(low (_LAT| 0))& (0+255)
  1441  03CF  120A  118A  259D  120A  118A  	fcall	_Latch_Traffic_LED
  1442                           
  1443                           ;VIP_MODE.c: 77:         Temp=0X00;
  1444  03D4  1283               	bcf	3,5	;RP0=0, select bank0
  1445  03D5  1303               	bcf	3,6	;RP1=0, select bank0
  1446  03D6  01BC               	clrf	_Temp
  1447                           
  1448                           ;VIP_MODE.c: 78:         Temp|=~(PORTB>>4);
  1449  03D7  0806               	movf	6,w	;volatile
  1450  03D8  00F6               	movwf	??_VIP_mode
  1451  03D9  3004               	movlw	4
  1452  03DA                     u2235:	
  1453  03DA  1003               	clrc
  1454  03DB  0CF6               	rrf	??_VIP_mode,f
  1455  03DC  3EFF               	addlw	-1
  1456  03DD  1D03               	skipz
  1457  03DE  2BDA               	goto	u2235
  1458  03DF  0876               	movf	??_VIP_mode,w
  1459  03E0  3AFF               	xorlw	255
  1460  03E1  00F7               	movwf	??_VIP_mode+1
  1461  03E2  0877               	movf	??_VIP_mode+1,w
  1462  03E3  04BC               	iorwf	_Temp,f
  1463                           
  1464                           ;VIP_MODE.c: 79:         Temp|=0X0F;
  1465  03E4  300F               	movlw	15
  1466  03E5  00F6               	movwf	??_VIP_mode
  1467  03E6  0876               	movf	??_VIP_mode,w
  1468  03E7  04BC               	iorwf	_Temp,f
  1469                           
  1470                           ;VIP_MODE.c: 80:         VIP=VIP_PrioTab[Temp];
  1471  03E8  083C               	movf	_Temp,w
  1472  03E9  3E11               	addlw	low ((_VIP_PrioTab-__stringbase)| (0+32768))
  1473  03EA  0084               	movwf	4
  1474  03EB  120A  118A  2500  120A  118A  	fcall	stringdir
  1475  03F0  00F6               	movwf	??_VIP_mode
  1476  03F1  0876               	movf	??_VIP_mode,w
  1477  03F2  00BD               	movwf	_VIP
  1478                           
  1479                           ;VIP_MODE.c: 81:         reset=1;
  1480  03F3  01BE               	clrf	_reset
  1481  03F4  0ABE               	incf	_reset,f
  1482  03F5                     l2572:	
  1483                           
  1484                           ;VIP_MODE.c: 65:     while(VIP==7)
  1485  03F5  3007               	movlw	7
  1486  03F6  063D               	xorwf	_VIP,w
  1487  03F7  1D03               	btfss	3,2
  1488  03F8  0008               	return
  1489  03F9  2BBC               	goto	l366
  1490  03FA                     __end_of_VIP_mode:	
  1491                           
  1492                           	psect	text2
  1493  059D                     __ptext2:	
  1494 ;; *************** function _Latch_Traffic_LED *****************
  1495 ;; Defined at:
  1496 ;;		line 4 in file "TRAFFIC.c"
  1497 ;; Parameters:    Size  Location     Type
  1498 ;;  LATptr          1    wreg     PTR int 
  1499 ;;		 -> LAT(2), 
  1500 ;; Auto vars:     Size  Location     Type
  1501 ;;  LATptr          1    5[COMMON] PTR int 
  1502 ;;		 -> LAT(2), 
  1503 ;; Return value:  Size  Location     Type
  1504 ;;                  1    wreg      void 
  1505 ;; Registers used:
  1506 ;;		wreg, fsr0l, fsr0h, status,2
  1507 ;; Tracked objects:
  1508 ;;		On entry : 0/0
  1509 ;;		On exit  : 0/0
  1510 ;;		Unchanged: 0/0
  1511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1512 ;;      Params:         0       0       0       0       0
  1513 ;;      Locals:         1       0       0       0       0
  1514 ;;      Temps:          2       0       0       0       0
  1515 ;;      Totals:         3       0       0       0       0
  1516 ;;Total ram usage:        3 bytes
  1517 ;; Hardware stack levels used:    1
  1518 ;; Hardware stack levels required when called:    2
  1519 ;; This function calls:
  1520 ;;		Nothing
  1521 ;; This function is called by:
  1522 ;;		_main
  1523 ;;		_VIP_mode
  1524 ;; This function uses a non-reentrant model
  1525 ;;
  1526                           
  1527                           
  1528                           ;psect for function _Latch_Traffic_LED
  1529  059D                     _Latch_Traffic_LED:	
  1530                           
  1531                           ;incstack = 0
  1532                           ; Regs used in _Latch_Traffic_LED: [wreg-fsr0h+status,2]
  1533                           ;Latch_Traffic_LED@LATptr stored from wreg
  1534  059D  00F5               	movwf	Latch_Traffic_LED@LATptr
  1535                           
  1536                           ;TRAFFIC.c: 4: void Latch_Traffic_LED(int *LATptr);TRAFFIC.c: 5: {;TRAFFIC.c: 6:     POR
      +                          TA= *LATptr;
  1537  059E  0875               	movf	Latch_Traffic_LED@LATptr,w
  1538  059F  0084               	movwf	4
  1539  05A0  0800               	movf	0,w
  1540  05A1  1283               	bcf	3,5	;RP0=0, select bank0
  1541  05A2  1303               	bcf	3,6	;RP1=0, select bank0
  1542  05A3  0085               	movwf	5	;volatile
  1543                           
  1544                           ;TRAFFIC.c: 7:    PORTB=(*LATptr>>8);
  1545  05A4  0875               	movf	Latch_Traffic_LED@LATptr,w
  1546  05A5  0084               	movwf	4
  1547  05A6  0800               	movf	0,w
  1548  05A7  00F3               	movwf	??_Latch_Traffic_LED
  1549  05A8  0A84               	incf	4,f
  1550  05A9  0800               	movf	0,w
  1551  05AA  00F4               	movwf	??_Latch_Traffic_LED+1
  1552  05AB  0874               	movf	??_Latch_Traffic_LED+1,w
  1553  05AC  0086               	movwf	6	;volatile
  1554  05AD  0008               	return
  1555  05AE                     __end_of_Latch_Traffic_LED:	
  1556                           
  1557                           	psect	text3
  1558  01AA                     __ptext3:	
  1559 ;; *************** function _LED_7SEGMENT_Update *****************
  1560 ;; Defined at:
  1561 ;;		line 21 in file "LED_SEGMENT.c"
  1562 ;; Parameters:    Size  Location     Type
  1563 ;;  val             1    wreg     PTR unsigned char 
  1564 ;;		 -> Seg(10), 
  1565 ;; Auto vars:     Size  Location     Type
  1566 ;;  val             1    5[COMMON] PTR unsigned char 
  1567 ;;		 -> Seg(10), 
  1568 ;; Return value:  Size  Location     Type
  1569 ;;                  1    wreg      void 
  1570 ;; Registers used:
  1571 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1572 ;; Tracked objects:
  1573 ;;		On entry : 0/0
  1574 ;;		On exit  : 0/0
  1575 ;;		Unchanged: 0/0
  1576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1577 ;;      Params:         0       0       0       0       0
  1578 ;;      Locals:         1       0       0       0       0
  1579 ;;      Temps:          2       0       0       0       0
  1580 ;;      Totals:         3       0       0       0       0
  1581 ;;Total ram usage:        3 bytes
  1582 ;; Hardware stack levels used:    1
  1583 ;; Hardware stack levels required when called:    2
  1584 ;; This function calls:
  1585 ;;		Nothing
  1586 ;; This function is called by:
  1587 ;;		_main
  1588 ;;		_VIP_mode
  1589 ;; This function uses a non-reentrant model
  1590 ;;
  1591                           
  1592                           
  1593                           ;psect for function _LED_7SEGMENT_Update
  1594  01AA                     _LED_7SEGMENT_Update:	
  1595                           
  1596                           ;incstack = 0
  1597                           ; Regs used in _LED_7SEGMENT_Update: [wreg-fsr0h+status,2+status,0+pclath]
  1598                           ;LED_7SEGMENT_Update@val stored from wreg
  1599  01AA  00F5               	movwf	LED_7SEGMENT_Update@val
  1600                           
  1601                           ;LED_SEGMENT.c: 21: void LED_7SEGMENT_Update(char val[]);LED_SEGMENT.c: 22: {;LED_SEGMEN
      +                          T.c: 23:    static char State=0;;LED_SEGMENT.c: 24:    static char BlinkCounter=0;;LED_S
      +                          EGMENT.c: 26:    BlinkCounter++;
  1602  01AB  3001               	movlw	1
  1603  01AC  00F3               	movwf	??_LED_7SEGMENT_Update
  1604  01AD  0873               	movf	??_LED_7SEGMENT_Update,w
  1605  01AE  1283               	bcf	3,5	;RP0=0, select bank0
  1606  01AF  1303               	bcf	3,6	;RP1=0, select bank0
  1607  01B0  07B9               	addwf	LED_7SEGMENT_Update@BlinkCounter,f
  1608                           
  1609                           ;LED_SEGMENT.c: 27:    if ( BlinkCounter==100)
  1610  01B1  3064               	movlw	100
  1611  01B2  0639               	xorwf	LED_7SEGMENT_Update@BlinkCounter,w
  1612  01B3  1D03               	btfss	3,2
  1613  01B4  29B8               	goto	l2172
  1614                           
  1615                           ;LED_SEGMENT.c: 28:    {;LED_SEGMENT.c: 29:        BlinkStatus=1;
  1616  01B5  01F8               	clrf	_BlinkStatus
  1617  01B6  0AF8               	incf	_BlinkStatus,f
  1618                           
  1619                           ;LED_SEGMENT.c: 30:    }
  1620  01B7  29BE               	goto	l163
  1621  01B8                     l2172:	
  1622  01B8  30C8               	movlw	200
  1623  01B9  0239               	subwf	LED_7SEGMENT_Update@BlinkCounter,w
  1624  01BA  1C03               	skipc
  1625  01BB  29BE               	goto	l163
  1626                           
  1627                           ;LED_SEGMENT.c: 32:    {;LED_SEGMENT.c: 33:        BlinkStatus=0;
  1628  01BC  01F8               	clrf	_BlinkStatus
  1629                           
  1630                           ;LED_SEGMENT.c: 34:        BlinkCounter=0;
  1631  01BD  01B9               	clrf	LED_7SEGMENT_Update@BlinkCounter
  1632  01BE                     l163:	
  1633                           
  1634                           ;LED_SEGMENT.c: 37:    PORTD=0x00;
  1635  01BE  0188               	clrf	8	;volatile
  1636                           
  1637                           ;LED_SEGMENT.c: 38:    switch(State)
  1638  01BF  2ACB               	goto	l2304
  1639  01C0                     l2176:	
  1640                           
  1641                           ;LED_SEGMENT.c: 41:            PORTC = ~SegTab[val[0]];
  1642  01C0  0875               	movf	LED_7SEGMENT_Update@val,w
  1643  01C1  0084               	movwf	4
  1644  01C2  1383               	bcf	3,7	;select IRP bank0
  1645  01C3  0800               	movf	0,w
  1646  01C4  3E01               	addlw	low ((_SegTab-__stringbase)| (0+32768))
  1647  01C5  0084               	movwf	4
  1648  01C6  120A  118A  2500  120A  118A  	fcall	stringdir
  1649  01CB  3AFF               	xorlw	255
  1650  01CC  0087               	movwf	7	;volatile
  1651                           
  1652                           ;LED_SEGMENT.c: 42:            if( val[8] & 1)
  1653  01CD  0875               	movf	LED_7SEGMENT_Update@val,w
  1654  01CE  3E08               	addlw	8
  1655  01CF  0084               	movwf	4
  1656  01D0  1800               	btfsc	0,0
  1657                           
  1658                           ;LED_SEGMENT.c: 43:            PORTC |=1<<1;
  1659  01D1  1487               	bsf	7,1	;volatile
  1660                           
  1661                           ;LED_SEGMENT.c: 44:            if ( val[9] & 1 && BlinkStatus==1 )
  1662  01D2  0875               	movf	LED_7SEGMENT_Update@val,w
  1663  01D3  3E09               	addlw	9
  1664  01D4  0084               	movwf	4
  1665  01D5  1C00               	btfss	0,0
  1666  01D6  29DB               	goto	l2188
  1667  01D7  0378               	decf	_BlinkStatus,w
  1668  01D8  1D03               	btfss	3,2
  1669  01D9  29DB               	goto	l2188
  1670                           
  1671                           ;LED_SEGMENT.c: 45:            {;LED_SEGMENT.c: 46:                PORTC=0;
  1672  01DA  0187               	clrf	7	;volatile
  1673  01DB                     l2188:	
  1674                           
  1675                           ;LED_SEGMENT.c: 49:            ((Segment*)&PORTD)->Seg.s1d1=1;
  1676  01DB  1408               	bsf	8,0
  1677                           
  1678                           ;LED_SEGMENT.c: 51:            State=1;
  1679  01DC  01BA               	clrf	LED_7SEGMENT_Update@State
  1680  01DD  0ABA               	incf	LED_7SEGMENT_Update@State,f
  1681                           
  1682                           ;LED_SEGMENT.c: 52:            break;
  1683  01DE  0008               	return
  1684  01DF                     l2192:	
  1685                           
  1686                           ;LED_SEGMENT.c: 54:            PORTC = ~SegTab[val[1]];
  1687  01DF  0A75               	incf	LED_7SEGMENT_Update@val,w
  1688  01E0  0084               	movwf	4
  1689  01E1  1383               	bcf	3,7	;select IRP bank0
  1690  01E2  0800               	movf	0,w
  1691  01E3  3E01               	addlw	low ((_SegTab-__stringbase)| (0+32768))
  1692  01E4  0084               	movwf	4
  1693  01E5  120A  118A  2500  120A  118A  	fcall	stringdir
  1694  01EA  3AFF               	xorlw	255
  1695  01EB  0087               	movwf	7	;volatile
  1696                           
  1697                           ;LED_SEGMENT.c: 55:            if( val[8] & 1)
  1698  01EC  0875               	movf	LED_7SEGMENT_Update@val,w
  1699  01ED  3E08               	addlw	8
  1700  01EE  0084               	movwf	4
  1701  01EF  1800               	btfsc	0,0
  1702                           
  1703                           ;LED_SEGMENT.c: 56:            PORTC |=1<<7;
  1704  01F0  1787               	bsf	7,7	;volatile
  1705                           
  1706                           ;LED_SEGMENT.c: 57:            if ( val[9] & 1 && BlinkStatus==1 )
  1707  01F1  0875               	movf	LED_7SEGMENT_Update@val,w
  1708  01F2  3E09               	addlw	9
  1709  01F3  0084               	movwf	4
  1710  01F4  1C00               	btfss	0,0
  1711  01F5  29FA               	goto	l2204
  1712  01F6  0378               	decf	_BlinkStatus,w
  1713  01F7  1D03               	btfss	3,2
  1714  01F8  29FA               	goto	l2204
  1715                           
  1716                           ;LED_SEGMENT.c: 58:            {;LED_SEGMENT.c: 59:                PORTC=0;
  1717  01F9  0187               	clrf	7	;volatile
  1718  01FA                     l2204:	
  1719                           
  1720                           ;LED_SEGMENT.c: 63:            ((Segment*)&PORTD)->Seg.s1d2=1;
  1721  01FA  1488               	bsf	8,1
  1722                           
  1723                           ;LED_SEGMENT.c: 65:            State=2;
  1724  01FB  3002               	movlw	2
  1725  01FC  00F3               	movwf	??_LED_7SEGMENT_Update
  1726  01FD  0873               	movf	??_LED_7SEGMENT_Update,w
  1727  01FE  00BA               	movwf	LED_7SEGMENT_Update@State
  1728                           
  1729                           ;LED_SEGMENT.c: 66:            break;
  1730  01FF  0008               	return
  1731  0200                     l2208:	
  1732                           
  1733                           ;LED_SEGMENT.c: 68:            PORTC =~ SegTab[val[2]];
  1734  0200  0875               	movf	LED_7SEGMENT_Update@val,w
  1735  0201  3E02               	addlw	2
  1736  0202  0084               	movwf	4
  1737  0203  1383               	bcf	3,7	;select IRP bank0
  1738  0204  0800               	movf	0,w
  1739  0205  3E01               	addlw	low ((_SegTab-__stringbase)| (0+32768))
  1740  0206  0084               	movwf	4
  1741  0207  120A  118A  2500  120A  118A  	fcall	stringdir
  1742  020C  3AFF               	xorlw	255
  1743  020D  0087               	movwf	7	;volatile
  1744                           
  1745                           ;LED_SEGMENT.c: 69:            if( val[8] & 1)
  1746  020E  0875               	movf	LED_7SEGMENT_Update@val,w
  1747  020F  3E08               	addlw	8
  1748  0210  0084               	movwf	4
  1749  0211  1800               	btfsc	0,0
  1750                           
  1751                           ;LED_SEGMENT.c: 70:              PORTC |=1<<7;
  1752  0212  1787               	bsf	7,7	;volatile
  1753                           
  1754                           ;LED_SEGMENT.c: 71:            if ( val[9] & 1 && BlinkStatus==1 )
  1755  0213  0875               	movf	LED_7SEGMENT_Update@val,w
  1756  0214  3E09               	addlw	9
  1757  0215  0084               	movwf	4
  1758  0216  1C00               	btfss	0,0
  1759  0217  2A1C               	goto	l2220
  1760  0218  0378               	decf	_BlinkStatus,w
  1761  0219  1D03               	btfss	3,2
  1762  021A  2A1C               	goto	l2220
  1763                           
  1764                           ;LED_SEGMENT.c: 72:            {;LED_SEGMENT.c: 73:                PORTC=0;
  1765  021B  0187               	clrf	7	;volatile
  1766  021C                     l2220:	
  1767                           
  1768                           ;LED_SEGMENT.c: 76:            ((Segment*)&PORTD)->Seg.s2d1=1;
  1769  021C  1508               	bsf	8,2
  1770                           
  1771                           ;LED_SEGMENT.c: 78:            State=3;
  1772  021D  3003               	movlw	3
  1773  021E  00F3               	movwf	??_LED_7SEGMENT_Update
  1774  021F  0873               	movf	??_LED_7SEGMENT_Update,w
  1775  0220  00BA               	movwf	LED_7SEGMENT_Update@State
  1776                           
  1777                           ;LED_SEGMENT.c: 79:            break;
  1778  0221  0008               	return
  1779  0222                     l2224:	
  1780                           
  1781                           ;LED_SEGMENT.c: 81:            PORTC = ~SegTab[val[3]];
  1782  0222  0875               	movf	LED_7SEGMENT_Update@val,w
  1783  0223  3E03               	addlw	3
  1784  0224  0084               	movwf	4
  1785  0225  1383               	bcf	3,7	;select IRP bank0
  1786  0226  0800               	movf	0,w
  1787  0227  3E01               	addlw	low ((_SegTab-__stringbase)| (0+32768))
  1788  0228  0084               	movwf	4
  1789  0229  120A  118A  2500  120A  118A  	fcall	stringdir
  1790  022E  3AFF               	xorlw	255
  1791  022F  0087               	movwf	7	;volatile
  1792                           
  1793                           ;LED_SEGMENT.c: 83:            if( val[8] & 1)
  1794  0230  0875               	movf	LED_7SEGMENT_Update@val,w
  1795  0231  3E08               	addlw	8
  1796  0232  0084               	movwf	4
  1797  0233  1800               	btfsc	0,0
  1798                           
  1799                           ;LED_SEGMENT.c: 84:              PORTC |=1<<7;
  1800  0234  1787               	bsf	7,7	;volatile
  1801                           
  1802                           ;LED_SEGMENT.c: 85:            if ( val[9] & 1 && BlinkStatus==1 )
  1803  0235  0875               	movf	LED_7SEGMENT_Update@val,w
  1804  0236  3E09               	addlw	9
  1805  0237  0084               	movwf	4
  1806  0238  1C00               	btfss	0,0
  1807  0239  2A3E               	goto	l2236
  1808  023A  0378               	decf	_BlinkStatus,w
  1809  023B  1D03               	btfss	3,2
  1810  023C  2A3E               	goto	l2236
  1811                           
  1812                           ;LED_SEGMENT.c: 86:            {;LED_SEGMENT.c: 87:                PORTC=0;
  1813  023D  0187               	clrf	7	;volatile
  1814  023E                     l2236:	
  1815                           
  1816                           ;LED_SEGMENT.c: 89:            ((Segment*)&PORTD)->Seg.s2d2=1;
  1817  023E  1588               	bsf	8,3
  1818                           
  1819                           ;LED_SEGMENT.c: 91:            State=4;
  1820  023F  3004               	movlw	4
  1821  0240  00F3               	movwf	??_LED_7SEGMENT_Update
  1822  0241  0873               	movf	??_LED_7SEGMENT_Update,w
  1823  0242  00BA               	movwf	LED_7SEGMENT_Update@State
  1824                           
  1825                           ;LED_SEGMENT.c: 92:            break;
  1826  0243  0008               	return
  1827  0244                     l2240:	
  1828                           
  1829                           ;LED_SEGMENT.c: 94:            PORTC =~ SegTab[val[4]];
  1830  0244  0875               	movf	LED_7SEGMENT_Update@val,w
  1831  0245  3E04               	addlw	4
  1832  0246  0084               	movwf	4
  1833  0247  1383               	bcf	3,7	;select IRP bank0
  1834  0248  0800               	movf	0,w
  1835  0249  3E01               	addlw	low ((_SegTab-__stringbase)| (0+32768))
  1836  024A  0084               	movwf	4
  1837  024B  120A  118A  2500  120A  118A  	fcall	stringdir
  1838  0250  3AFF               	xorlw	255
  1839  0251  0087               	movwf	7	;volatile
  1840                           
  1841                           ;LED_SEGMENT.c: 95:            if( val[8] & 1)
  1842  0252  0875               	movf	LED_7SEGMENT_Update@val,w
  1843  0253  3E08               	addlw	8
  1844  0254  0084               	movwf	4
  1845  0255  1800               	btfsc	0,0
  1846                           
  1847                           ;LED_SEGMENT.c: 96:              PORTC |=1<<7;
  1848  0256  1787               	bsf	7,7	;volatile
  1849                           
  1850                           ;LED_SEGMENT.c: 97:            if ( val[9] & 1 && BlinkStatus==1 )
  1851  0257  0875               	movf	LED_7SEGMENT_Update@val,w
  1852  0258  3E09               	addlw	9
  1853  0259  0084               	movwf	4
  1854  025A  1C00               	btfss	0,0
  1855  025B  2A60               	goto	l2252
  1856  025C  0378               	decf	_BlinkStatus,w
  1857  025D  1D03               	btfss	3,2
  1858  025E  2A60               	goto	l2252
  1859                           
  1860                           ;LED_SEGMENT.c: 98:            {;LED_SEGMENT.c: 99:                PORTC=0;
  1861  025F  0187               	clrf	7	;volatile
  1862  0260                     l2252:	
  1863                           
  1864                           ;LED_SEGMENT.c: 101:            ((Segment*)&PORTD)->Seg.s3d1=1;
  1865  0260  1608               	bsf	8,4
  1866                           
  1867                           ;LED_SEGMENT.c: 103:            State=5;
  1868  0261  3005               	movlw	5
  1869  0262  00F3               	movwf	??_LED_7SEGMENT_Update
  1870  0263  0873               	movf	??_LED_7SEGMENT_Update,w
  1871  0264  00BA               	movwf	LED_7SEGMENT_Update@State
  1872                           
  1873                           ;LED_SEGMENT.c: 104:            break;
  1874  0265  0008               	return
  1875  0266                     l2256:	
  1876                           
  1877                           ;LED_SEGMENT.c: 106:            PORTC = ~SegTab[val[5]];
  1878  0266  0875               	movf	LED_7SEGMENT_Update@val,w
  1879  0267  3E05               	addlw	5
  1880  0268  0084               	movwf	4
  1881  0269  1383               	bcf	3,7	;select IRP bank0
  1882  026A  0800               	movf	0,w
  1883  026B  3E01               	addlw	low ((_SegTab-__stringbase)| (0+32768))
  1884  026C  0084               	movwf	4
  1885  026D  120A  118A  2500  120A  118A  	fcall	stringdir
  1886  0272  3AFF               	xorlw	255
  1887  0273  0087               	movwf	7	;volatile
  1888                           
  1889                           ;LED_SEGMENT.c: 107:            if( val[8] & 1)
  1890  0274  0875               	movf	LED_7SEGMENT_Update@val,w
  1891  0275  3E08               	addlw	8
  1892  0276  0084               	movwf	4
  1893  0277  1800               	btfsc	0,0
  1894                           
  1895                           ;LED_SEGMENT.c: 108:            PORTC |=1<<7;
  1896  0278  1787               	bsf	7,7	;volatile
  1897                           
  1898                           ;LED_SEGMENT.c: 109:             if ( val[9] & 1 && BlinkStatus==1 )
  1899  0279  0875               	movf	LED_7SEGMENT_Update@val,w
  1900  027A  3E09               	addlw	9
  1901  027B  0084               	movwf	4
  1902  027C  1C00               	btfss	0,0
  1903  027D  2A82               	goto	l2268
  1904  027E  0378               	decf	_BlinkStatus,w
  1905  027F  1D03               	btfss	3,2
  1906  0280  2A82               	goto	l2268
  1907                           
  1908                           ;LED_SEGMENT.c: 110:            {;LED_SEGMENT.c: 111:                PORTC=0;
  1909  0281  0187               	clrf	7	;volatile
  1910  0282                     l2268:	
  1911                           
  1912                           ;LED_SEGMENT.c: 114:            ((Segment*)&PORTD)->Seg.s3d2=1;
  1913  0282  1688               	bsf	8,5
  1914                           
  1915                           ;LED_SEGMENT.c: 116:            State=6;
  1916  0283  3006               	movlw	6
  1917  0284  00F3               	movwf	??_LED_7SEGMENT_Update
  1918  0285  0873               	movf	??_LED_7SEGMENT_Update,w
  1919  0286  00BA               	movwf	LED_7SEGMENT_Update@State
  1920                           
  1921                           ;LED_SEGMENT.c: 117:            break;
  1922  0287  0008               	return
  1923  0288                     l2272:	
  1924                           
  1925                           ;LED_SEGMENT.c: 120:            PORTC =~ SegTab[val[6]];
  1926  0288  0875               	movf	LED_7SEGMENT_Update@val,w
  1927  0289  3E06               	addlw	6
  1928  028A  0084               	movwf	4
  1929  028B  1383               	bcf	3,7	;select IRP bank0
  1930  028C  0800               	movf	0,w
  1931  028D  3E01               	addlw	low ((_SegTab-__stringbase)| (0+32768))
  1932  028E  0084               	movwf	4
  1933  028F  120A  118A  2500  120A  118A  	fcall	stringdir
  1934  0294  3AFF               	xorlw	255
  1935  0295  0087               	movwf	7	;volatile
  1936                           
  1937                           ;LED_SEGMENT.c: 121:            if( val[8] & 1)
  1938  0296  0875               	movf	LED_7SEGMENT_Update@val,w
  1939  0297  3E08               	addlw	8
  1940  0298  0084               	movwf	4
  1941  0299  1800               	btfsc	0,0
  1942                           
  1943                           ;LED_SEGMENT.c: 122:            PORTC |=1<<7;
  1944  029A  1787               	bsf	7,7	;volatile
  1945                           
  1946                           ;LED_SEGMENT.c: 123:             if ( val[9] & 1 && BlinkStatus==1 )
  1947  029B  0875               	movf	LED_7SEGMENT_Update@val,w
  1948  029C  3E09               	addlw	9
  1949  029D  0084               	movwf	4
  1950  029E  1C00               	btfss	0,0
  1951  029F  2AA4               	goto	l2284
  1952  02A0  0378               	decf	_BlinkStatus,w
  1953  02A1  1D03               	btfss	3,2
  1954  02A2  2AA4               	goto	l2284
  1955                           
  1956                           ;LED_SEGMENT.c: 124:            {;LED_SEGMENT.c: 125:                PORTC=0;
  1957  02A3  0187               	clrf	7	;volatile
  1958  02A4                     l2284:	
  1959                           
  1960                           ;LED_SEGMENT.c: 128:            ((Segment*)&PORTD)->Seg.s4d1=1;
  1961  02A4  1708               	bsf	8,6
  1962                           
  1963                           ;LED_SEGMENT.c: 130:            State=7;
  1964  02A5  3007               	movlw	7
  1965  02A6  00F3               	movwf	??_LED_7SEGMENT_Update
  1966  02A7  0873               	movf	??_LED_7SEGMENT_Update,w
  1967  02A8  00BA               	movwf	LED_7SEGMENT_Update@State
  1968                           
  1969                           ;LED_SEGMENT.c: 131:            break;
  1970  02A9  0008               	return
  1971  02AA                     l2288:	
  1972                           
  1973                           ;LED_SEGMENT.c: 134:            PORTC =~ SegTab[val[7]];
  1974  02AA  0875               	movf	LED_7SEGMENT_Update@val,w
  1975  02AB  3E07               	addlw	7
  1976  02AC  0084               	movwf	4
  1977  02AD  1383               	bcf	3,7	;select IRP bank0
  1978  02AE  0800               	movf	0,w
  1979  02AF  3E01               	addlw	low ((_SegTab-__stringbase)| (0+32768))
  1980  02B0  0084               	movwf	4
  1981  02B1  120A  118A  2500  120A  118A  	fcall	stringdir
  1982  02B6  3AFF               	xorlw	255
  1983  02B7  0087               	movwf	7	;volatile
  1984                           
  1985                           ;LED_SEGMENT.c: 135:            if( val[8] & 1)
  1986  02B8  0875               	movf	LED_7SEGMENT_Update@val,w
  1987  02B9  3E08               	addlw	8
  1988  02BA  0084               	movwf	4
  1989  02BB  1800               	btfsc	0,0
  1990                           
  1991                           ;LED_SEGMENT.c: 136:            PORTC |=1<<7;
  1992  02BC  1787               	bsf	7,7	;volatile
  1993                           
  1994                           ;LED_SEGMENT.c: 137:             if ( val[9] & 1 && BlinkStatus==1 )
  1995  02BD  0875               	movf	LED_7SEGMENT_Update@val,w
  1996  02BE  3E09               	addlw	9
  1997  02BF  0084               	movwf	4
  1998  02C0  1C00               	btfss	0,0
  1999  02C1  2AC6               	goto	l2300
  2000  02C2  0378               	decf	_BlinkStatus,w
  2001  02C3  1D03               	btfss	3,2
  2002  02C4  2AC6               	goto	l2300
  2003                           
  2004                           ;LED_SEGMENT.c: 138:            {;LED_SEGMENT.c: 139:                PORTC=0;
  2005  02C5  0187               	clrf	7	;volatile
  2006  02C6                     l2300:	
  2007                           
  2008                           ;LED_SEGMENT.c: 142:            ((Segment*)&PORTD)->Seg.s4d2=1;
  2009  02C6  1788               	bsf	8,7
  2010                           
  2011                           ;LED_SEGMENT.c: 144:            State=0;
  2012  02C7  01BA               	clrf	LED_7SEGMENT_Update@State
  2013                           
  2014                           ;LED_SEGMENT.c: 145:            break;
  2015  02C8  0008               	return
  2016  02C9                     l2302:	
  2017                           
  2018                           ;LED_SEGMENT.c: 149:            State=0;
  2019  02C9  01BA               	clrf	LED_7SEGMENT_Update@State
  2020                           
  2021                           ;LED_SEGMENT.c: 150:    }
  2022  02CA  0008               	return
  2023  02CB                     l2304:	
  2024  02CB  083A               	movf	LED_7SEGMENT_Update@State,w
  2025  02CC  00F3               	movwf	??_LED_7SEGMENT_Update
  2026  02CD  01F4               	clrf	??_LED_7SEGMENT_Update+1
  2027                           
  2028                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2029                           ; Switch size 1, requested type "simple"
  2030                           ; Number of cases is 1, Range of values is 0 to 0
  2031                           ; switch strategies available:
  2032                           ; Name         Instructions Cycles
  2033                           ; simple_byte            4     3 (average)
  2034                           ; direct_byte           11     8 (fixed)
  2035                           ; jumptable            260     6 (fixed)
  2036                           ;	Chosen strategy is simple_byte
  2037  02CE  0874               	movf	??_LED_7SEGMENT_Update+1,w
  2038  02CF  3A00               	xorlw	0	; case 0
  2039  02D0  1903               	skipnz
  2040  02D1  2AD3               	goto	l2670
  2041  02D2  2AC9               	goto	l2302
  2042  02D3                     l2670:	
  2043                           
  2044                           ; Switch size 1, requested type "simple"
  2045                           ; Number of cases is 8, Range of values is 0 to 7
  2046                           ; switch strategies available:
  2047                           ; Name         Instructions Cycles
  2048                           ; simple_byte           25    13 (average)
  2049                           ; direct_byte           32     8 (fixed)
  2050                           ; jumptable            260     6 (fixed)
  2051                           ;	Chosen strategy is simple_byte
  2052  02D3  0873               	movf	??_LED_7SEGMENT_Update,w
  2053  02D4  3A00               	xorlw	0	; case 0
  2054  02D5  1903               	skipnz
  2055  02D6  29C0               	goto	l2176
  2056  02D7  3A01               	xorlw	1	; case 1
  2057  02D8  1903               	skipnz
  2058  02D9  29DF               	goto	l2192
  2059  02DA  3A03               	xorlw	3	; case 2
  2060  02DB  1903               	skipnz
  2061  02DC  2A00               	goto	l2208
  2062  02DD  3A01               	xorlw	1	; case 3
  2063  02DE  1903               	skipnz
  2064  02DF  2A22               	goto	l2224
  2065  02E0  3A07               	xorlw	7	; case 4
  2066  02E1  1903               	skipnz
  2067  02E2  2A44               	goto	l2240
  2068  02E3  3A01               	xorlw	1	; case 5
  2069  02E4  1903               	skipnz
  2070  02E5  2A66               	goto	l2256
  2071  02E6  3A03               	xorlw	3	; case 6
  2072  02E7  1903               	skipnz
  2073  02E8  2A88               	goto	l2272
  2074  02E9  3A01               	xorlw	1	; case 7
  2075  02EA  1903               	skipnz
  2076  02EB  2AAA               	goto	l2288
  2077  02EC  2AC9               	goto	l2302
  2078  02ED  0008               	return
  2079  02EE                     __end_of_LED_7SEGMENT_Update:	
  2080                           
  2081                           	psect	text4
  2082  05D0                     __ptext4:	
  2083 ;; *************** function _Clr_LED *****************
  2084 ;; Defined at:
  2085 ;;		line 173 in file "TRAFFIC.c"
  2086 ;; Parameters:    Size  Location     Type
  2087 ;;		None
  2088 ;; Auto vars:     Size  Location     Type
  2089 ;;		None
  2090 ;; Return value:  Size  Location     Type
  2091 ;;                  1    wreg      void 
  2092 ;; Registers used:
  2093 ;;		status,2
  2094 ;; Tracked objects:
  2095 ;;		On entry : 0/0
  2096 ;;		On exit  : 0/0
  2097 ;;		Unchanged: 0/0
  2098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2099 ;;      Params:         0       0       0       0       0
  2100 ;;      Locals:         0       0       0       0       0
  2101 ;;      Temps:          0       0       0       0       0
  2102 ;;      Totals:         0       0       0       0       0
  2103 ;;Total ram usage:        0 bytes
  2104 ;; Hardware stack levels used:    1
  2105 ;; Hardware stack levels required when called:    2
  2106 ;; This function calls:
  2107 ;;		Nothing
  2108 ;; This function is called by:
  2109 ;;		_main
  2110 ;;		_VIP_mode
  2111 ;; This function uses a non-reentrant model
  2112 ;;
  2113                           
  2114                           
  2115                           ;psect for function _Clr_LED
  2116  05D0                     _Clr_LED:	
  2117                           
  2118                           ;TRAFFIC.c: 175:     LAT=0;
  2119                           
  2120                           ;incstack = 0
  2121                           ; Regs used in _Clr_LED: [status,2]
  2122  05D0  01F9               	clrf	_LAT
  2123  05D1  01FA               	clrf	_LAT+1
  2124  05D2  0008               	return
  2125  05D3                     __end_of_Clr_LED:	
  2126                           
  2127                           	psect	text5
  2128  0545                     __ptext5:	
  2129 ;; *************** function _Traffic_Light *****************
  2130 ;; Defined at:
  2131 ;;		line 146 in file "TRAFFIC.c"
  2132 ;; Parameters:    Size  Location     Type
  2133 ;;  led             2    3[COMMON] int 
  2134 ;; Auto vars:     Size  Location     Type
  2135 ;;		None
  2136 ;; Return value:  Size  Location     Type
  2137 ;;                  1    wreg      void 
  2138 ;; Registers used:
  2139 ;;		None
  2140 ;; Tracked objects:
  2141 ;;		On entry : 0/0
  2142 ;;		On exit  : 0/0
  2143 ;;		Unchanged: 0/0
  2144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2145 ;;      Params:         2       0       0       0       0
  2146 ;;      Locals:         0       0       0       0       0
  2147 ;;      Temps:          0       0       0       0       0
  2148 ;;      Totals:         2       0       0       0       0
  2149 ;;Total ram usage:        2 bytes
  2150 ;; Hardware stack levels used:    1
  2151 ;; Hardware stack levels required when called:    2
  2152 ;; This function calls:
  2153 ;;		Nothing
  2154 ;; This function is called by:
  2155 ;;		_main
  2156 ;; This function uses a non-reentrant model
  2157 ;;
  2158                           
  2159                           
  2160                           ;psect for function _Traffic_Light
  2161  0545                     _Traffic_Light:	
  2162                           
  2163                           ;TRAFFIC.c: 146: void Traffic_Light(int led);TRAFFIC.c: 147: {;TRAFFIC.c: 148:     if((l
      +                          ed&1))
  2164                           
  2165                           ;incstack = 0
  2166                           ; Regs used in _Traffic_Light: []
  2167  0545  1873               	btfsc	Traffic_Light@led,0
  2168                           
  2169                           ;TRAFFIC.c: 149:         ((TrafficLight*)&LAT)->LED.t1red=1;
  2170  0546  1479               	bsf	_LAT,0
  2171                           
  2172                           ;TRAFFIC.c: 150:     if((led&(1<<1)))
  2173  0547  18F3               	btfsc	Traffic_Light@led,1
  2174                           
  2175                           ;TRAFFIC.c: 151:         ((TrafficLight*)&LAT)->LED.t1yellow=1;
  2176  0548  14F9               	bsf	_LAT,1
  2177                           
  2178                           ;TRAFFIC.c: 152:     if((led&(1<<2)))
  2179  0549  1973               	btfsc	Traffic_Light@led,2
  2180                           
  2181                           ;TRAFFIC.c: 153:         ((TrafficLight*)&LAT)->LED.t1green=1;
  2182  054A  1579               	bsf	_LAT,2
  2183                           
  2184                           ;TRAFFIC.c: 154:      if((led&(1<<3)))
  2185  054B  19F3               	btfsc	Traffic_Light@led,3
  2186                           
  2187                           ;TRAFFIC.c: 155:         ((TrafficLight*)&LAT)->LED.t2red=1;
  2188  054C  15F9               	bsf	_LAT,3
  2189                           
  2190                           ;TRAFFIC.c: 156:      if((led&(1<<4)))
  2191  054D  1A73               	btfsc	Traffic_Light@led,4
  2192                           
  2193                           ;TRAFFIC.c: 157:         ((TrafficLight*)&LAT)->LED.t2yellow=1;
  2194  054E  1679               	bsf	_LAT,4
  2195                           
  2196                           ;TRAFFIC.c: 158:       if((led&(1<<5)))
  2197  054F  1AF3               	btfsc	Traffic_Light@led,5
  2198                           
  2199                           ;TRAFFIC.c: 159:         ((TrafficLight*)&LAT)->LED.t2green=1;
  2200  0550  16F9               	bsf	_LAT,5
  2201                           
  2202                           ;TRAFFIC.c: 160:        if((led&(1<<6)))
  2203  0551  1B73               	btfsc	Traffic_Light@led,6
  2204                           
  2205                           ;TRAFFIC.c: 161:         ((TrafficLight*)&LAT)->LED.t3red=1;
  2206  0552  1779               	bsf	_LAT,6
  2207                           
  2208                           ;TRAFFIC.c: 162:         if((led&(1<<7)))
  2209  0553  1BF3               	btfsc	Traffic_Light@led,7
  2210                           
  2211                           ;TRAFFIC.c: 163:          ((TrafficLight*)&LAT)->LED.t3yellow=1;
  2212  0554  17F9               	bsf	_LAT,7
  2213                           
  2214                           ;TRAFFIC.c: 164:         if((led&(1<<8)))
  2215  0555  1874               	btfsc	Traffic_Light@led+1,0
  2216                           
  2217                           ;TRAFFIC.c: 165:              ((TrafficLight*)&LAT)->LED.t3green=1;
  2218  0556  147A               	bsf	_LAT+1,0
  2219                           
  2220                           ;TRAFFIC.c: 166:         if((led&(1<<9)))
  2221  0557  18F4               	btfsc	Traffic_Light@led+1,1
  2222                           
  2223                           ;TRAFFIC.c: 167:              ((TrafficLight*)&LAT)->LED.t4red=1;
  2224  0558  14FA               	bsf	_LAT+1,1
  2225                           
  2226                           ;TRAFFIC.c: 168:         if((led&(1<<10)))
  2227  0559  1974               	btfsc	Traffic_Light@led+1,2
  2228                           
  2229                           ;TRAFFIC.c: 169:              ((TrafficLight*)&LAT)->LED.t4yellow=1;
  2230  055A  157A               	bsf	_LAT+1,2
  2231                           
  2232                           ;TRAFFIC.c: 170:          if((led&(1<<11)))
  2233  055B  1DF4               	btfss	Traffic_Light@led+1,3
  2234  055C  0008               	return
  2235                           
  2236                           ;TRAFFIC.c: 171:              ((TrafficLight*)&LAT)->LED.t4green=1;
  2237  055D  15FA               	bsf	_LAT+1,3
  2238  055E  0008               	return
  2239  055F                     __end_of_Traffic_Light:	
  2240                           
  2241                           	psect	text6
  2242  04BC                     __ptext6:	
  2243 ;; *************** function _TMR2_Setup *****************
  2244 ;; Defined at:
  2245 ;;		line 4 in file "TMR2.c"
  2246 ;; Parameters:    Size  Location     Type
  2247 ;;  period          1    wreg     unsigned char 
  2248 ;;  presc           1    3[COMMON] unsigned char 
  2249 ;;  postsc          1    4[COMMON] unsigned char 
  2250 ;; Auto vars:     Size  Location     Type
  2251 ;;  period          1    7[COMMON] unsigned char 
  2252 ;; Return value:  Size  Location     Type
  2253 ;;                  1    wreg      void 
  2254 ;; Registers used:
  2255 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2256 ;; Tracked objects:
  2257 ;;		On entry : 0/0
  2258 ;;		On exit  : 0/0
  2259 ;;		Unchanged: 0/0
  2260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2261 ;;      Params:         2       0       0       0       0
  2262 ;;      Locals:         1       0       0       0       0
  2263 ;;      Temps:          2       0       0       0       0
  2264 ;;      Totals:         5       0       0       0       0
  2265 ;;Total ram usage:        5 bytes
  2266 ;; Hardware stack levels used:    1
  2267 ;; Hardware stack levels required when called:    2
  2268 ;; This function calls:
  2269 ;;		Nothing
  2270 ;; This function is called by:
  2271 ;;		_main
  2272 ;; This function uses a non-reentrant model
  2273 ;;
  2274                           
  2275                           
  2276                           ;psect for function _TMR2_Setup
  2277  04BC                     _TMR2_Setup:	
  2278                           
  2279                           ;incstack = 0
  2280                           ; Regs used in _TMR2_Setup: [wreg-fsr0h+status,2+status,0]
  2281                           ;TMR2_Setup@period stored from wreg
  2282  04BC  00F7               	movwf	TMR2_Setup@period
  2283                           
  2284                           ;TMR2.c: 4: void TMR2_Setup(char period,char presc,char postsc);TMR2.c: 5: {;TMR2.c: 6: 
      +                              PR2= period-1;
  2285  04BD  0877               	movf	TMR2_Setup@period,w
  2286  04BE  3EFF               	addlw	255
  2287  04BF  1683               	bsf	3,5	;RP0=1, select bank1
  2288  04C0  1303               	bcf	3,6	;RP1=0, select bank1
  2289  04C1  0092               	movwf	18	;volatile
  2290                           
  2291                           ;TMR2.c: 7:     T2CON &= ~3;
  2292  04C2  30FC               	movlw	252
  2293  04C3  00F5               	movwf	??_TMR2_Setup
  2294  04C4  0875               	movf	??_TMR2_Setup,w
  2295  04C5  1283               	bcf	3,5	;RP0=0, select bank0
  2296  04C6  1303               	bcf	3,6	;RP1=0, select bank0
  2297  04C7  0592               	andwf	18,f	;volatile
  2298                           
  2299                           ;TMR2.c: 8:     switch(presc)
  2300  04C8  2CCE               	goto	l1780
  2301  04C9                     l105:	
  2302                           ;TMR2.c: 12:         case 4:
  2303                           
  2304                           
  2305                           ;TMR2.c: 13:             T2CON|=1;
  2306  04C9  1412               	bsf	18,0	;volatile
  2307                           
  2308                           ;TMR2.c: 14:             break;
  2309  04CA  2CE1               	goto	l1782
  2310  04CB                     l106:	
  2311                           ;TMR2.c: 15:         case 16:
  2312                           
  2313                           
  2314                           ;TMR2.c: 16:             T2CON|=1<<1;
  2315  04CB  1492               	bsf	18,1	;volatile
  2316                           
  2317                           ;TMR2.c: 17:             break;
  2318  04CC  2CE1               	goto	l1782
  2319  04CD                     l108:	
  2320                           ;TMR2.c: 19:             while(1)
  2321                           
  2322  04CD  2CCD               	goto	l108
  2323  04CE                     l1780:	
  2324  04CE  0873               	movf	TMR2_Setup@presc,w
  2325  04CF  00F5               	movwf	??_TMR2_Setup
  2326  04D0  01F6               	clrf	??_TMR2_Setup+1
  2327                           
  2328                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2329                           ; Switch size 1, requested type "simple"
  2330                           ; Number of cases is 1, Range of values is 0 to 0
  2331                           ; switch strategies available:
  2332                           ; Name         Instructions Cycles
  2333                           ; simple_byte            4     3 (average)
  2334                           ; direct_byte           11     8 (fixed)
  2335                           ; jumptable            260     6 (fixed)
  2336                           ;	Chosen strategy is simple_byte
  2337  04D1  0876               	movf	??_TMR2_Setup+1,w
  2338  04D2  3A00               	xorlw	0	; case 0
  2339  04D3  1903               	skipnz
  2340  04D4  2CD6               	goto	l2672
  2341  04D5  2CCD               	goto	l108
  2342  04D6                     l2672:	
  2343                           
  2344                           ; Switch size 1, requested type "simple"
  2345                           ; Number of cases is 3, Range of values is 1 to 16
  2346                           ; switch strategies available:
  2347                           ; Name         Instructions Cycles
  2348                           ; simple_byte           10     6 (average)
  2349                           ; direct_byte           59    11 (fixed)
  2350                           ; jumptable            263     9 (fixed)
  2351                           ;	Chosen strategy is simple_byte
  2352  04D6  0875               	movf	??_TMR2_Setup,w
  2353  04D7  3A01               	xorlw	1	; case 1
  2354  04D8  1903               	skipnz
  2355  04D9  2CE1               	goto	l1782
  2356  04DA  3A05               	xorlw	5	; case 4
  2357  04DB  1903               	skipnz
  2358  04DC  2CC9               	goto	l105
  2359  04DD  3A14               	xorlw	20	; case 16
  2360  04DE  1903               	skipnz
  2361  04DF  2CCB               	goto	l106
  2362  04E0  2CCD               	goto	l108
  2363  04E1                     l1782:	
  2364                           
  2365                           ;TMR2.c: 23:     if (postsc<=16)
  2366  04E1  3011               	movlw	17
  2367  04E2  0274               	subwf	TMR2_Setup@postsc,w
  2368  04E3  1803               	skipnc
  2369  04E4  2CFB               	goto	l114
  2370                           
  2371                           ;TMR2.c: 24:     {;TMR2.c: 25:         T2CON &=~( 0xF<<3);
  2372  04E5  3087               	movlw	135
  2373  04E6  00F5               	movwf	??_TMR2_Setup
  2374  04E7  0875               	movf	??_TMR2_Setup,w
  2375  04E8  0592               	andwf	18,f	;volatile
  2376                           
  2377                           ;TMR2.c: 26:            if(postsc!=0)
  2378  04E9  0874               	movf	TMR2_Setup@postsc,w
  2379  04EA  1903               	btfsc	3,2
  2380  04EB  0008               	return
  2381                           
  2382                           ;TMR2.c: 27:              T2CON|= (postsc-1)<<3;
  2383  04EC  0874               	movf	TMR2_Setup@postsc,w	;volatile
  2384  04ED  00F5               	movwf	??_TMR2_Setup
  2385  04EE  3002               	movlw	2
  2386  04EF                     u1165:	
  2387  04EF  1003               	clrc
  2388  04F0  0DF5               	rlf	??_TMR2_Setup,f
  2389  04F1  3EFF               	addlw	-1
  2390  04F2  1D03               	skipz
  2391  04F3  2CEF               	goto	u1165
  2392  04F4  1003               	clrc
  2393  04F5  0D75               	rlf	??_TMR2_Setup,w
  2394  04F6  3EF8               	addlw	248
  2395  04F7  00F6               	movwf	??_TMR2_Setup+1
  2396  04F8  0876               	movf	??_TMR2_Setup+1,w
  2397  04F9  0492               	iorwf	18,f	;volatile
  2398  04FA  0008               	return
  2399  04FB                     l114:	
  2400                           ;TMR2.c: 31:     {;TMR2.c: 32:         while(1)
  2401                           
  2402  04FB  2CFB               	goto	l114
  2403  04FC                     __end_of_TMR2_Setup:	
  2404                           
  2405                           	psect	text7
  2406  05CC                     __ptext7:	
  2407 ;; *************** function _TMR2_ON *****************
  2408 ;; Defined at:
  2409 ;;		line 37 in file "TMR2.c"
  2410 ;; Parameters:    Size  Location     Type
  2411 ;;		None
  2412 ;; Auto vars:     Size  Location     Type
  2413 ;;		None
  2414 ;; Return value:  Size  Location     Type
  2415 ;;                  1    wreg      void 
  2416 ;; Registers used:
  2417 ;;		None
  2418 ;; Tracked objects:
  2419 ;;		On entry : 0/0
  2420 ;;		On exit  : 0/0
  2421 ;;		Unchanged: 0/0
  2422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2423 ;;      Params:         0       0       0       0       0
  2424 ;;      Locals:         0       0       0       0       0
  2425 ;;      Temps:          0       0       0       0       0
  2426 ;;      Totals:         0       0       0       0       0
  2427 ;;Total ram usage:        0 bytes
  2428 ;; Hardware stack levels used:    1
  2429 ;; Hardware stack levels required when called:    2
  2430 ;; This function calls:
  2431 ;;		Nothing
  2432 ;; This function is called by:
  2433 ;;		_main
  2434 ;; This function uses a non-reentrant model
  2435 ;;
  2436                           
  2437                           
  2438                           ;psect for function _TMR2_ON
  2439  05CC                     _TMR2_ON:	
  2440                           
  2441                           ;TMR2.c: 39:     T2CON|=1<<2;
  2442                           
  2443                           ;incstack = 0
  2444                           ; Regs used in _TMR2_ON: []
  2445  05CC  1283               	bcf	3,5	;RP0=0, select bank0
  2446  05CD  1303               	bcf	3,6	;RP1=0, select bank0
  2447  05CE  1512               	bsf	18,2	;volatile
  2448  05CF  0008               	return
  2449  05D0                     __end_of_TMR2_ON:	
  2450                           
  2451                           	psect	text8
  2452  0576                     __ptext8:	
  2453 ;; *************** function _TMR2_Interrupt *****************
  2454 ;; Defined at:
  2455 ;;		line 42 in file "TMR2.c"
  2456 ;; Parameters:    Size  Location     Type
  2457 ;;  En              1    wreg     unsigned char 
  2458 ;; Auto vars:     Size  Location     Type
  2459 ;;  En              1    4[COMMON] unsigned char 
  2460 ;; Return value:  Size  Location     Type
  2461 ;;                  1    wreg      void 
  2462 ;; Registers used:
  2463 ;;		wreg, status,2, status,0
  2464 ;; Tracked objects:
  2465 ;;		On entry : 0/0
  2466 ;;		On exit  : 0/0
  2467 ;;		Unchanged: 0/0
  2468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2469 ;;      Params:         0       0       0       0       0
  2470 ;;      Locals:         1       0       0       0       0
  2471 ;;      Temps:          1       0       0       0       0
  2472 ;;      Totals:         2       0       0       0       0
  2473 ;;Total ram usage:        2 bytes
  2474 ;; Hardware stack levels used:    1
  2475 ;; Hardware stack levels required when called:    2
  2476 ;; This function calls:
  2477 ;;		Nothing
  2478 ;; This function is called by:
  2479 ;;		_main
  2480 ;; This function uses a non-reentrant model
  2481 ;;
  2482                           
  2483                           
  2484                           ;psect for function _TMR2_Interrupt
  2485  0576                     _TMR2_Interrupt:	
  2486                           
  2487                           ;incstack = 0
  2488                           ; Regs used in _TMR2_Interrupt: [wreg+status,2+status,0]
  2489                           ;TMR2_Interrupt@En stored from wreg
  2490  0576  00F4               	movwf	TMR2_Interrupt@En
  2491                           
  2492                           ;TMR2.c: 42: void TMR2_Interrupt(char En);TMR2.c: 43: {;TMR2.c: 44:     PIR1 &=~(1<<1);
  2493  0577  30FD               	movlw	253
  2494  0578  00F3               	movwf	??_TMR2_Interrupt
  2495  0579  0873               	movf	??_TMR2_Interrupt,w
  2496  057A  1283               	bcf	3,5	;RP0=0, select bank0
  2497  057B  1303               	bcf	3,6	;RP1=0, select bank0
  2498  057C  058C               	andwf	12,f	;volatile
  2499                           
  2500                           ;TMR2.c: 45:     if (En)
  2501  057D  0874               	movf	TMR2_Interrupt@En,w
  2502  057E  1903               	btfsc	3,2
  2503  057F  2D84               	goto	l1796
  2504                           
  2505                           ;TMR2.c: 46:         PIE1 |=1<<1;
  2506  0580  1683               	bsf	3,5	;RP0=1, select bank1
  2507  0581  1303               	bcf	3,6	;RP1=0, select bank1
  2508  0582  148C               	bsf	12,1	;volatile
  2509  0583  2D8A               	goto	l1798
  2510  0584                     l1796:	
  2511                           
  2512                           ;TMR2.c: 48:         PIE1 &=~(1<<1);
  2513  0584  30FD               	movlw	253
  2514  0585  00F3               	movwf	??_TMR2_Interrupt
  2515  0586  0873               	movf	??_TMR2_Interrupt,w
  2516  0587  1683               	bsf	3,5	;RP0=1, select bank1
  2517  0588  1303               	bcf	3,6	;RP1=0, select bank1
  2518  0589  058C               	andwf	12,f	;volatile
  2519  058A                     l1798:	
  2520                           
  2521                           ;TMR2.c: 50:     INTCON |=1<<6;
  2522  058A  170B               	bsf	11,6	;volatile
  2523  058B  0008               	return
  2524  058C                     __end_of_TMR2_Interrupt:	
  2525                           
  2526                           	psect	text9
  2527  0526                     __ptext9:	
  2528 ;; *************** function _PORT_Init *****************
  2529 ;; Defined at:
  2530 ;;		line 59 in file "main.c"
  2531 ;; Parameters:    Size  Location     Type
  2532 ;;		None
  2533 ;; Auto vars:     Size  Location     Type
  2534 ;;		None
  2535 ;; Return value:  Size  Location     Type
  2536 ;;                  1    wreg      void 
  2537 ;; Registers used:
  2538 ;;		wreg, status,2, status,0
  2539 ;; Tracked objects:
  2540 ;;		On entry : 0/0
  2541 ;;		On exit  : 0/0
  2542 ;;		Unchanged: 0/0
  2543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2544 ;;      Params:         0       0       0       0       0
  2545 ;;      Locals:         0       0       0       0       0
  2546 ;;      Temps:          1       0       0       0       0
  2547 ;;      Totals:         1       0       0       0       0
  2548 ;;Total ram usage:        1 bytes
  2549 ;; Hardware stack levels used:    1
  2550 ;; Hardware stack levels required when called:    2
  2551 ;; This function calls:
  2552 ;;		Nothing
  2553 ;; This function is called by:
  2554 ;;		_main
  2555 ;; This function uses a non-reentrant model
  2556 ;;
  2557                           
  2558                           
  2559                           ;psect for function _PORT_Init
  2560  0526                     _PORT_Init:	
  2561                           
  2562                           ;main.c: 61:     TRISC=0X00;
  2563                           
  2564                           ;incstack = 0
  2565                           ; Regs used in _PORT_Init: [wreg+status,2+status,0]
  2566  0526  1683               	bsf	3,5	;RP0=1, select bank1
  2567  0527  1303               	bcf	3,6	;RP1=0, select bank1
  2568  0528  0187               	clrf	7	;volatile
  2569                           
  2570                           ;main.c: 62:     TRISB=0XF0;
  2571  0529  30F0               	movlw	240
  2572  052A  0086               	movwf	6	;volatile
  2573                           
  2574                           ;main.c: 63:     TRISA=0X00;
  2575  052B  0185               	clrf	5	;volatile
  2576                           
  2577                           ;main.c: 64:     TRISD=0X00;
  2578  052C  0188               	clrf	8	;volatile
  2579                           
  2580                           ;main.c: 65:     PORTA=0X00;
  2581  052D  1283               	bcf	3,5	;RP0=0, select bank0
  2582  052E  1303               	bcf	3,6	;RP1=0, select bank0
  2583  052F  0185               	clrf	5	;volatile
  2584                           
  2585                           ;main.c: 66:     PORTB=0X00;
  2586  0530  0186               	clrf	6	;volatile
  2587                           
  2588                           ;main.c: 67:     ANSELH=0X00;
  2589  0531  1683               	bsf	3,5	;RP0=1, select bank3
  2590  0532  1703               	bsf	3,6	;RP1=1, select bank3
  2591  0533  0189               	clrf	9	;volatile
  2592                           
  2593                           ;main.c: 68:     OPTION_REG &=~(1<<7);
  2594  0534  307F               	movlw	127
  2595  0535  00F3               	movwf	??_PORT_Init
  2596  0536  0873               	movf	??_PORT_Init,w
  2597  0537  1683               	bsf	3,5	;RP0=1, select bank1
  2598  0538  1303               	bcf	3,6	;RP1=0, select bank1
  2599  0539  0581               	andwf	1,f	;volatile
  2600                           
  2601                           ;main.c: 69:     WPUB=0XF0;
  2602  053A  30F0               	movlw	240
  2603  053B  0095               	movwf	21	;volatile
  2604                           
  2605                           ;main.c: 70:     PORTC=0X00;
  2606  053C  1283               	bcf	3,5	;RP0=0, select bank0
  2607  053D  1303               	bcf	3,6	;RP1=0, select bank0
  2608  053E  0187               	clrf	7	;volatile
  2609                           
  2610                           ;main.c: 71:     PORTD=0X00;
  2611  053F  0188               	clrf	8	;volatile
  2612                           
  2613                           ;main.c: 72:     OSCCON=(1<<6)|(1<<5)|(1<<2)|1;
  2614  0540  3065               	movlw	101
  2615  0541  1683               	bsf	3,5	;RP0=1, select bank1
  2616  0542  1303               	bcf	3,6	;RP1=0, select bank1
  2617  0543  008F               	movwf	15	;volatile
  2618  0544  0008               	return
  2619  0545                     __end_of_PORT_Init:	
  2620                           
  2621                           	psect	text10
  2622  0031                     __ptext10:	
  2623 ;; *************** function _Counting *****************
  2624 ;; Defined at:
  2625 ;;		line 11 in file "TRAFFIC.c"
  2626 ;; Parameters:    Size  Location     Type
  2627 ;;		None
  2628 ;; Auto vars:     Size  Location     Type
  2629 ;;		None
  2630 ;; Return value:  Size  Location     Type
  2631 ;;                  1    wreg      void 
  2632 ;; Registers used:
  2633 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2634 ;; Tracked objects:
  2635 ;;		On entry : 0/0
  2636 ;;		On exit  : 0/0
  2637 ;;		Unchanged: 0/0
  2638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2639 ;;      Params:         0       0       0       0       0
  2640 ;;      Locals:         0      10       0       0       0
  2641 ;;      Temps:          0       3       0       0       0
  2642 ;;      Totals:         0      13       0       0       0
  2643 ;;Total ram usage:       13 bytes
  2644 ;; Hardware stack levels used:    1
  2645 ;; Hardware stack levels required when called:    3
  2646 ;; This function calls:
  2647 ;;		_Sec2Time
  2648 ;; This function is called by:
  2649 ;;		_main
  2650 ;; This function uses a non-reentrant model
  2651 ;;
  2652                           
  2653                           
  2654                           ;psect for function _Counting
  2655  0031                     _Counting:	
  2656                           
  2657                           ;TRAFFIC.c: 13:     static char i=0;;TRAFFIC.c: 14:      static signed char s1=10;;TRAFF
      +                          IC.c: 15:      static signed char s2=10;;TRAFFIC.c: 16:      static signed char s3=20;;T
      +                          RAFFIC.c: 17:      static signed char s4=30;;TRAFFIC.c: 18:      static char j=0;;TRAFFI
      +                          C.c: 19:      static char T=1;;TRAFFIC.c: 20:      static char S1;;TRAFFIC.c: 21:      s
      +                          tatic char S2;;TRAFFIC.c: 22:      static char S3;;TRAFFIC.c: 23:      static char S4;;T
      +                          RAFFIC.c: 24:      if(reset)
  2658                           
  2659                           ;incstack = 0
  2660                           ; Regs used in _Counting: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2661  0031  1283               	bcf	3,5	;RP0=0, select bank0
  2662  0032  1303               	bcf	3,6	;RP1=0, select bank0
  2663  0033  083E               	movf	_reset,w
  2664  0034  1903               	btfsc	3,2
  2665  0035  2846               	goto	l2354
  2666                           
  2667                           ;TRAFFIC.c: 25:      {;TRAFFIC.c: 26:         reset=j=i=0;
  2668  0036  01B8               	clrf	Counting@i
  2669  0037  01B7               	clrf	Counting@j
  2670  0038  01BE               	clrf	_reset
  2671                           
  2672                           ;TRAFFIC.c: 27:         s1=s2=10;
  2673  0039  300A               	movlw	10
  2674  003A  00C3               	movwf	Counting@s2
  2675  003B  00A2               	movwf	??_Counting
  2676  003C  0822               	movf	??_Counting,w
  2677  003D  00C4               	movwf	Counting@s1
  2678                           
  2679                           ;TRAFFIC.c: 28:         s3=20;
  2680  003E  3014               	movlw	20
  2681  003F  00A2               	movwf	??_Counting
  2682  0040  0822               	movf	??_Counting,w
  2683  0041  00C2               	movwf	Counting@s3
  2684                           
  2685                           ;TRAFFIC.c: 29:         s4=30;
  2686  0042  301E               	movlw	30
  2687  0043  00A2               	movwf	??_Counting
  2688  0044  0822               	movf	??_Counting,w
  2689  0045  00C1               	movwf	Counting@s4
  2690  0046                     l2354:	
  2691                           
  2692                           ;TRAFFIC.c: 31:      i++;
  2693  0046  3001               	movlw	1
  2694  0047  00A2               	movwf	??_Counting
  2695  0048  0822               	movf	??_Counting,w
  2696  0049  07B8               	addwf	Counting@i,f
  2697                           
  2698                           ;TRAFFIC.c: 32:      if(i<200)
  2699  004A  30C8               	movlw	200
  2700  004B  0238               	subwf	Counting@i,w
  2701  004C  1C03               	btfss	3,0
  2702  004D  0008               	return
  2703                           
  2704                           ;TRAFFIC.c: 34:      j++;
  2705  004E  3001               	movlw	1
  2706  004F  00A2               	movwf	??_Counting
  2707  0050  0822               	movf	??_Counting,w
  2708  0051  07B7               	addwf	Counting@j,f
  2709                           
  2710                           ;TRAFFIC.c: 36:      if(j>=10)
  2711  0052  300A               	movlw	10
  2712  0053  0237               	subwf	Counting@j,w
  2713  0054  1C03               	skipc
  2714  0055  285B               	goto	l2368
  2715                           
  2716                           ;TRAFFIC.c: 37:      {;TRAFFIC.c: 38:          j=0;
  2717  0056  01B7               	clrf	Counting@j
  2718                           
  2719                           ;TRAFFIC.c: 39:          T++;
  2720  0057  3001               	movlw	1
  2721  0058  00A2               	movwf	??_Counting
  2722  0059  0822               	movf	??_Counting,w
  2723  005A  07C0               	addwf	Counting@T,f
  2724  005B                     l2368:	
  2725                           
  2726                           ;TRAFFIC.c: 42:      s1--;
  2727  005B  30FF               	movlw	255
  2728  005C  00A2               	movwf	??_Counting
  2729  005D  0822               	movf	??_Counting,w
  2730  005E  07C4               	addwf	Counting@s1,f
  2731                           
  2732                           ;TRAFFIC.c: 43:      s2--;
  2733  005F  30FF               	movlw	255
  2734  0060  00A2               	movwf	??_Counting
  2735  0061  0822               	movf	??_Counting,w
  2736  0062  07C3               	addwf	Counting@s2,f
  2737                           
  2738                           ;TRAFFIC.c: 44:      s3--;
  2739  0063  30FF               	movlw	255
  2740  0064  00A2               	movwf	??_Counting
  2741  0065  0822               	movf	??_Counting,w
  2742  0066  07C2               	addwf	Counting@s3,f
  2743                           
  2744                           ;TRAFFIC.c: 45:      s4--;
  2745  0067  30FF               	movlw	255
  2746  0068  00A2               	movwf	??_Counting
  2747  0069  0822               	movf	??_Counting,w
  2748  006A  07C1               	addwf	Counting@s4,f
  2749                           
  2750                           ;TRAFFIC.c: 46:      i=0;
  2751  006B  01B8               	clrf	Counting@i
  2752                           
  2753                           ;TRAFFIC.c: 48:      T=(T>4)? 1:T;
  2754  006C  3005               	movlw	5
  2755  006D  0240               	subwf	Counting@T,w
  2756  006E  1803               	skipnc
  2757  006F  2877               	goto	l2382
  2758  0070  0840               	movf	Counting@T,w
  2759  0071  00A2               	movwf	??_Counting
  2760  0072  01A3               	clrf	??_Counting+1
  2761  0073  0822               	movf	??_Counting,w
  2762  0074  00A5               	movwf	_Counting$252
  2763  0075  0823               	movf	??_Counting+1,w
  2764  0076  287A               	goto	L1
  2765  0077                     l2382:	
  2766  0077  3001               	movlw	1
  2767  0078  00A5               	movwf	_Counting$252
  2768  0079  3000               	movlw	0
  2769  007A                     L1:	
  2770  007A  00A6               	movwf	_Counting$252+1
  2771  007B  0825               	movf	_Counting$252,w
  2772  007C  00A2               	movwf	??_Counting
  2773  007D  0822               	movf	??_Counting,w
  2774  007E  00C0               	movwf	Counting@T
  2775                           
  2776                           ;TRAFFIC.c: 50:      switch(T)
  2777  007F  28E0               	goto	l2394
  2778  0080                     l2384:	
  2779                           
  2780                           ;TRAFFIC.c: 54:              S1=10;
  2781  0080  300A               	movlw	10
  2782  0081  00A2               	movwf	??_Counting
  2783  0082  0822               	movf	??_Counting,w
  2784  0083  00B6               	movwf	Counting@S1
  2785                           
  2786                           ;TRAFFIC.c: 55:              S2=10;
  2787  0084  300A               	movlw	10
  2788  0085  00A2               	movwf	??_Counting
  2789  0086  0822               	movf	??_Counting,w
  2790  0087  00B5               	movwf	Counting@S2
  2791                           
  2792                           ;TRAFFIC.c: 56:              S3=20;
  2793  0088  3014               	movlw	20
  2794  0089  00A2               	movwf	??_Counting
  2795  008A  0822               	movf	??_Counting,w
  2796  008B  00B4               	movwf	Counting@S3
  2797                           
  2798                           ;TRAFFIC.c: 57:              S4=30;
  2799  008C  301E               	movlw	30
  2800  008D  00A2               	movwf	??_Counting
  2801  008E  0822               	movf	??_Counting,w
  2802  008F  00B3               	movwf	Counting@S4
  2803                           
  2804                           ;TRAFFIC.c: 58:              LED|=((1<<2)|(1<<3)|(1<<6)|(1<<9));
  2805  0090  304C               	movlw	76
  2806  0091  04B1               	iorwf	_LED,f
  2807  0092  3002               	movlw	2
  2808  0093  04B2               	iorwf	_LED+1,f
  2809                           
  2810                           ;TRAFFIC.c: 59:              LED&=~(1|(1<<5)|(1<<8)|(1<<11)|(1<<1)|(1<<4)|(1<<7)|(1<<10)
      +                          );
  2811  0094  304C               	movlw	76
  2812  0095  28AB               	goto	L2
  2813  0096                     l2386:	
  2814                           ;TRAFFIC.c: 60:              break;
  2815                           
  2816                           
  2817                           ;TRAFFIC.c: 62:                 S2=10;
  2818  0096  300A               	movlw	10
  2819  0097  00A2               	movwf	??_Counting
  2820  0098  0822               	movf	??_Counting,w
  2821  0099  00B5               	movwf	Counting@S2
  2822                           
  2823                           ;TRAFFIC.c: 63:              S1=30;
  2824  009A  301E               	movlw	30
  2825  009B  00A2               	movwf	??_Counting
  2826  009C  0822               	movf	??_Counting,w
  2827  009D  00B6               	movwf	Counting@S1
  2828                           
  2829                           ;TRAFFIC.c: 64:              S3=10;
  2830  009E  300A               	movlw	10
  2831  009F  00A2               	movwf	??_Counting
  2832  00A0  0822               	movf	??_Counting,w
  2833  00A1  00B4               	movwf	Counting@S3
  2834                           
  2835                           ;TRAFFIC.c: 65:              S4=20;
  2836  00A2  3014               	movlw	20
  2837  00A3  00A2               	movwf	??_Counting
  2838  00A4  0822               	movf	??_Counting,w
  2839  00A5  00B3               	movwf	Counting@S4
  2840                           
  2841                           ;TRAFFIC.c: 66:              LED|=((1<<5)|1|(1<<6)|(1<<9));
  2842  00A6  3061               	movlw	97
  2843  00A7  04B1               	iorwf	_LED,f
  2844  00A8  3002               	movlw	2
  2845  00A9  04B2               	iorwf	_LED+1,f
  2846                           
  2847                           ;TRAFFIC.c: 67:              LED&=~((1<<3)|(1<<2)|(1<<8)|(1<<11)|(1<<1)|(1<<4)|(1<<7)|(1
      +                          <<10));
  2848  00AA  3061               	movlw	97
  2849  00AB                     L2:	
  2850  00AB  05B1               	andwf	_LED,f
  2851  00AC  30F2               	movlw	242
  2852  00AD  28DD               	goto	L4
  2853  00AE                     l2388:	
  2854                           ;TRAFFIC.c: 68:              break;
  2855                           
  2856                           
  2857                           ;TRAFFIC.c: 70:                 S3=10;
  2858  00AE  300A               	movlw	10
  2859  00AF  00A2               	movwf	??_Counting
  2860  00B0  0822               	movf	??_Counting,w
  2861  00B1  00B4               	movwf	Counting@S3
  2862                           
  2863                           ;TRAFFIC.c: 71:              S1=20;
  2864  00B2  3014               	movlw	20
  2865  00B3  00A2               	movwf	??_Counting
  2866  00B4  0822               	movf	??_Counting,w
  2867  00B5  00B6               	movwf	Counting@S1
  2868                           
  2869                           ;TRAFFIC.c: 72:              S2=30;
  2870  00B6  301E               	movlw	30
  2871  00B7  00A2               	movwf	??_Counting
  2872  00B8  0822               	movf	??_Counting,w
  2873  00B9  00B5               	movwf	Counting@S2
  2874                           
  2875                           ;TRAFFIC.c: 73:              S4=10;
  2876  00BA  300A               	movlw	10
  2877  00BB  00A2               	movwf	??_Counting
  2878  00BC  0822               	movf	??_Counting,w
  2879  00BD  00B3               	movwf	Counting@S4
  2880                           
  2881                           ;TRAFFIC.c: 74:               LED|=((1<<8)|1|(1<<3)|(1<<9));
  2882  00BE  3009               	movlw	9
  2883  00BF  04B1               	iorwf	_LED,f
  2884  00C0  3003               	movlw	3
  2885  00C1  04B2               	iorwf	_LED+1,f
  2886                           
  2887                           ;TRAFFIC.c: 75:              LED&=~((1<<6)|(1<<2)|(1<<5)|(1<<11)|(1<<1)|(1<<4)|(1<<7)|(1
      +                          <<10));
  2888  00C2  3009               	movlw	9
  2889  00C3  05B1               	andwf	_LED,f
  2890  00C4  30F3               	movlw	243
  2891  00C5  28DD               	goto	L4
  2892  00C6                     l2390:	
  2893                           ;TRAFFIC.c: 76:              break;
  2894                           
  2895                           
  2896                           ;TRAFFIC.c: 78:              S4=10;
  2897  00C6  300A               	movlw	10
  2898  00C7  00A2               	movwf	??_Counting
  2899  00C8  0822               	movf	??_Counting,w
  2900  00C9  00B3               	movwf	Counting@S4
  2901                           
  2902                           ;TRAFFIC.c: 79:              S2=20;
  2903  00CA  3014               	movlw	20
  2904  00CB  00A2               	movwf	??_Counting
  2905  00CC  0822               	movf	??_Counting,w
  2906  00CD  00B5               	movwf	Counting@S2
  2907                           
  2908                           ;TRAFFIC.c: 80:              S3=30;
  2909  00CE  301E               	movlw	30
  2910  00CF  00A2               	movwf	??_Counting
  2911  00D0  0822               	movf	??_Counting,w
  2912  00D1  00B4               	movwf	Counting@S3
  2913                           
  2914                           ;TRAFFIC.c: 81:              S1=10;
  2915  00D2  300A               	movlw	10
  2916  00D3  00A2               	movwf	??_Counting
  2917  00D4  0822               	movf	??_Counting,w
  2918  00D5  00B6               	movwf	Counting@S1
  2919                           
  2920                           ;TRAFFIC.c: 82:              LED|=((1<<11)|(1<<3)|(1<<6)|1);
  2921  00D6  3049               	movlw	73
  2922  00D7  04B1               	iorwf	_LED,f
  2923  00D8  3008               	movlw	8
  2924  00D9  04B2               	iorwf	_LED+1,f
  2925                           
  2926                           ;TRAFFIC.c: 83:              LED&=~((1<<9)|(1<<5)|(1<<8)|(1<<2)|(1<<1)|(1<<4)|(1<<7)|(1<
      +                          <10));
  2927  00DA  3049               	movlw	73
  2928  00DB  05B1               	andwf	_LED,f
  2929  00DC  30F8               	movlw	248
  2930  00DD                     L4:	
  2931  00DD  05B2               	andwf	_LED+1,f
  2932                           
  2933                           ;TRAFFIC.c: 84:              break;
  2934  00DE  28F9               	goto	l2396
  2935  00DF                     l258:	
  2936                           ;TRAFFIC.c: 86:              while(1)
  2937                           
  2938  00DF  28DF               	goto	l258
  2939  00E0                     l2394:	
  2940  00E0  0840               	movf	Counting@T,w
  2941  00E1  00A2               	movwf	??_Counting
  2942  00E2  01A3               	clrf	??_Counting+1
  2943                           
  2944                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2945                           ; Switch size 1, requested type "simple"
  2946                           ; Number of cases is 1, Range of values is 0 to 0
  2947                           ; switch strategies available:
  2948                           ; Name         Instructions Cycles
  2949                           ; simple_byte            4     3 (average)
  2950                           ; direct_byte           11     8 (fixed)
  2951                           ; jumptable            260     6 (fixed)
  2952                           ;	Chosen strategy is simple_byte
  2953  00E3  0823               	movf	??_Counting+1,w
  2954  00E4  3A00               	xorlw	0	; case 0
  2955  00E5  1903               	skipnz
  2956  00E6  28E8               	goto	l2674
  2957  00E7  28DF               	goto	l258
  2958  00E8                     l2674:	
  2959                           
  2960                           ; Switch size 1, requested type "simple"
  2961                           ; Number of cases is 5, Range of values is 0 to 4
  2962                           ; switch strategies available:
  2963                           ; Name         Instructions Cycles
  2964                           ; simple_byte           16     9 (average)
  2965                           ; direct_byte           23     8 (fixed)
  2966                           ; jumptable            260     6 (fixed)
  2967                           ;	Chosen strategy is simple_byte
  2968  00E8  0822               	movf	??_Counting,w
  2969  00E9  3A00               	xorlw	0	; case 0
  2970  00EA  1903               	skipnz
  2971  00EB  2880               	goto	l2384
  2972  00EC  3A01               	xorlw	1	; case 1
  2973  00ED  1903               	skipnz
  2974  00EE  2880               	goto	l2384
  2975  00EF  3A03               	xorlw	3	; case 2
  2976  00F0  1903               	skipnz
  2977  00F1  2896               	goto	l2386
  2978  00F2  3A01               	xorlw	1	; case 3
  2979  00F3  1903               	skipnz
  2980  00F4  28AE               	goto	l2388
  2981  00F5  3A07               	xorlw	7	; case 4
  2982  00F6  1903               	skipnz
  2983  00F7  28C6               	goto	l2390
  2984  00F8  28DF               	goto	l258
  2985  00F9                     l2396:	
  2986                           
  2987                           ;TRAFFIC.c: 90:      if((~LED&1)&&(s1<=1))
  2988  00F9  0832               	movf	_LED+1,w
  2989  00FA  00A3               	movwf	??_Counting+1
  2990  00FB  0831               	movf	_LED,w
  2991  00FC  00A2               	movwf	??_Counting
  2992  00FD  09A2               	comf	??_Counting,f
  2993  00FE  09A3               	comf	??_Counting+1,f
  2994  00FF  1C22               	btfss	??_Counting,0
  2995  0100  290B               	goto	l261
  2996  0101  0844               	movf	Counting@s1,w
  2997  0102  3A80               	xorlw	128
  2998  0103  3E7E               	addlw	-130
  2999  0104  1803               	skipnc
  3000  0105  290B               	goto	l261
  3001                           
  3002                           ;TRAFFIC.c: 91:      {;TRAFFIC.c: 92:          LED|=(1<<1);
  3003  0106  14B1               	bsf	_LED,1
  3004                           
  3005                           ;TRAFFIC.c: 93:          LED&=~(1<<2);
  3006  0107  30FB               	movlw	251
  3007  0108  05B1               	andwf	_LED,f
  3008  0109  30FF               	movlw	255
  3009  010A  05B2               	andwf	_LED+1,f
  3010  010B                     l261:	
  3011                           ;TRAFFIC.c: 94:      }
  3012                           
  3013                           
  3014                           ;TRAFFIC.c: 95:       if((~LED&(1<<3))&&(s2<=1))
  3015  010B  0832               	movf	_LED+1,w
  3016  010C  00A3               	movwf	??_Counting+1
  3017  010D  0831               	movf	_LED,w
  3018  010E  00A2               	movwf	??_Counting
  3019  010F  09A2               	comf	??_Counting,f
  3020  0110  09A3               	comf	??_Counting+1,f
  3021  0111  1DA2               	btfss	??_Counting,3
  3022  0112  291D               	goto	l262
  3023  0113  0843               	movf	Counting@s2,w
  3024  0114  3A80               	xorlw	128
  3025  0115  3E7E               	addlw	-130
  3026  0116  1803               	skipnc
  3027  0117  291D               	goto	l262
  3028                           
  3029                           ;TRAFFIC.c: 96:       {;TRAFFIC.c: 97:          LED|=(1<<4);
  3030  0118  1631               	bsf	_LED,4
  3031                           
  3032                           ;TRAFFIC.c: 98:          LED&=~(1<<5);
  3033  0119  30DF               	movlw	223
  3034  011A  05B1               	andwf	_LED,f
  3035  011B  30FF               	movlw	255
  3036  011C  05B2               	andwf	_LED+1,f
  3037  011D                     l262:	
  3038                           ;TRAFFIC.c: 99:       }
  3039                           
  3040                           
  3041                           ;TRAFFIC.c: 100:       if((~LED&(1<<6))&&(s3<=1))
  3042  011D  0832               	movf	_LED+1,w
  3043  011E  00A3               	movwf	??_Counting+1
  3044  011F  0831               	movf	_LED,w
  3045  0120  00A2               	movwf	??_Counting
  3046  0121  09A2               	comf	??_Counting,f
  3047  0122  09A3               	comf	??_Counting+1,f
  3048  0123  1F22               	btfss	??_Counting,6
  3049  0124  292F               	goto	l263
  3050  0125  0842               	movf	Counting@s3,w
  3051  0126  3A80               	xorlw	128
  3052  0127  3E7E               	addlw	-130
  3053  0128  1803               	skipnc
  3054  0129  292F               	goto	l263
  3055                           
  3056                           ;TRAFFIC.c: 101:       {;TRAFFIC.c: 102:          LED|=(1<<7);
  3057  012A  17B1               	bsf	_LED,7
  3058                           
  3059                           ;TRAFFIC.c: 103:          LED&=~(1<<8);
  3060  012B  30FF               	movlw	255
  3061  012C  05B1               	andwf	_LED,f
  3062  012D  30FE               	movlw	254
  3063  012E  05B2               	andwf	_LED+1,f
  3064  012F                     l263:	
  3065                           ;TRAFFIC.c: 104:       }
  3066                           
  3067                           
  3068                           ;TRAFFIC.c: 105:       if((~LED&(1<<9))&&(s4<=1))
  3069  012F  0832               	movf	_LED+1,w
  3070  0130  00A3               	movwf	??_Counting+1
  3071  0131  0831               	movf	_LED,w
  3072  0132  00A2               	movwf	??_Counting
  3073  0133  09A2               	comf	??_Counting,f
  3074  0134  09A3               	comf	??_Counting+1,f
  3075  0135  1CA3               	btfss	??_Counting+1,1
  3076  0136  2941               	goto	l264
  3077  0137  0841               	movf	Counting@s4,w
  3078  0138  3A80               	xorlw	128
  3079  0139  3E7E               	addlw	-130
  3080  013A  1803               	skipnc
  3081  013B  2941               	goto	l264
  3082                           
  3083                           ;TRAFFIC.c: 106:       {;TRAFFIC.c: 107:          LED|=(1<<10);
  3084  013C  1532               	bsf	_LED+1,2
  3085                           
  3086                           ;TRAFFIC.c: 108:          LED&=~(1<<11);
  3087  013D  30FF               	movlw	255
  3088  013E  05B1               	andwf	_LED,f
  3089  013F  30F7               	movlw	247
  3090  0140  05B2               	andwf	_LED+1,f
  3091  0141                     l264:	
  3092                           ;TRAFFIC.c: 109:       }
  3093                           
  3094                           
  3095                           ;TRAFFIC.c: 110:      s1=(s1>0) ? s1: S1;
  3096  0141  0844               	movf	Counting@s1,w
  3097  0142  3A80               	xorlw	128
  3098  0143  3E7F               	addlw	-129
  3099  0144  1803               	skipnc
  3100  0145  294E               	goto	l2424
  3101  0146  0836               	movf	Counting@S1,w
  3102  0147  00A2               	movwf	??_Counting
  3103  0148  01A3               	clrf	??_Counting+1
  3104  0149  0822               	movf	??_Counting,w
  3105  014A  00A7               	movwf	_Counting$253
  3106  014B  0823               	movf	??_Counting+1,w
  3107  014C  00A8               	movwf	_Counting$253+1
  3108  014D  2953               	goto	l2426
  3109  014E                     l2424:	
  3110  014E  0844               	movf	Counting@s1,w
  3111  014F  00A7               	movwf	_Counting$253
  3112  0150  01A8               	clrf	_Counting$253+1
  3113  0151  1BA7               	btfsc	_Counting$253,7
  3114  0152  03A8               	decf	_Counting$253+1,f
  3115  0153                     l2426:	
  3116  0153  0827               	movf	_Counting$253,w
  3117  0154  00A2               	movwf	??_Counting
  3118  0155  0822               	movf	??_Counting,w
  3119  0156  00C4               	movwf	Counting@s1
  3120                           
  3121                           ;TRAFFIC.c: 111:      s2=(s2>0) ? s2: S2;
  3122  0157  0843               	movf	Counting@s2,w
  3123  0158  3A80               	xorlw	128
  3124  0159  3E7F               	addlw	-129
  3125  015A  1803               	skipnc
  3126  015B  2964               	goto	l2432
  3127  015C  0835               	movf	Counting@S2,w
  3128  015D  00A2               	movwf	??_Counting
  3129  015E  01A3               	clrf	??_Counting+1
  3130  015F  0822               	movf	??_Counting,w
  3131  0160  00A9               	movwf	_Counting$254
  3132  0161  0823               	movf	??_Counting+1,w
  3133  0162  00AA               	movwf	_Counting$254+1
  3134  0163  2969               	goto	l2434
  3135  0164                     l2432:	
  3136  0164  0843               	movf	Counting@s2,w
  3137  0165  00A9               	movwf	_Counting$254
  3138  0166  01AA               	clrf	_Counting$254+1
  3139  0167  1BA9               	btfsc	_Counting$254,7
  3140  0168  03AA               	decf	_Counting$254+1,f
  3141  0169                     l2434:	
  3142  0169  0829               	movf	_Counting$254,w
  3143  016A  00A2               	movwf	??_Counting
  3144  016B  0822               	movf	??_Counting,w
  3145  016C  00C3               	movwf	Counting@s2
  3146                           
  3147                           ;TRAFFIC.c: 112:      s3=(s3>0) ? s3: S3;
  3148  016D  0842               	movf	Counting@s3,w
  3149  016E  3A80               	xorlw	128
  3150  016F  3E7F               	addlw	-129
  3151  0170  1803               	skipnc
  3152  0171  297A               	goto	l2440
  3153  0172  0834               	movf	Counting@S3,w
  3154  0173  00A2               	movwf	??_Counting
  3155  0174  01A3               	clrf	??_Counting+1
  3156  0175  0822               	movf	??_Counting,w
  3157  0176  00AB               	movwf	_Counting$255
  3158  0177  0823               	movf	??_Counting+1,w
  3159  0178  00AC               	movwf	_Counting$255+1
  3160  0179  297F               	goto	l2442
  3161  017A                     l2440:	
  3162  017A  0842               	movf	Counting@s3,w
  3163  017B  00AB               	movwf	_Counting$255
  3164  017C  01AC               	clrf	_Counting$255+1
  3165  017D  1BAB               	btfsc	_Counting$255,7
  3166  017E  03AC               	decf	_Counting$255+1,f
  3167  017F                     l2442:	
  3168  017F  082B               	movf	_Counting$255,w
  3169  0180  00A2               	movwf	??_Counting
  3170  0181  0822               	movf	??_Counting,w
  3171  0182  00C2               	movwf	Counting@s3
  3172                           
  3173                           ;TRAFFIC.c: 113:      s4=(s4>0) ? s4: S4;
  3174  0183  0841               	movf	Counting@s4,w
  3175  0184  3A80               	xorlw	128
  3176  0185  3E7F               	addlw	-129
  3177  0186  1803               	skipnc
  3178  0187  2990               	goto	l2448
  3179  0188  0833               	movf	Counting@S4,w
  3180  0189  00A2               	movwf	??_Counting
  3181  018A  01A3               	clrf	??_Counting+1
  3182  018B  0822               	movf	??_Counting,w
  3183  018C  00AD               	movwf	_Counting$256
  3184  018D  0823               	movf	??_Counting+1,w
  3185  018E  00AE               	movwf	_Counting$256+1
  3186  018F  2995               	goto	l2450
  3187  0190                     l2448:	
  3188  0190  0841               	movf	Counting@s4,w
  3189  0191  00AD               	movwf	_Counting$256
  3190  0192  01AE               	clrf	_Counting$256+1
  3191  0193  1BAD               	btfsc	_Counting$256,7
  3192  0194  03AE               	decf	_Counting$256+1,f
  3193  0195                     l2450:	
  3194  0195  082D               	movf	_Counting$256,w
  3195  0196  00A2               	movwf	??_Counting
  3196  0197  0822               	movf	??_Counting,w
  3197  0198  00C1               	movwf	Counting@s4
  3198                           
  3199                           ;TRAFFIC.c: 114:      Sec2Time(s1,s2,s3,s4);
  3200  0199  0843               	movf	Counting@s2,w
  3201  019A  00A2               	movwf	??_Counting
  3202  019B  0822               	movf	??_Counting,w
  3203  019C  00F3               	movwf	Sec2Time@t2
  3204  019D  0842               	movf	Counting@s3,w
  3205  019E  00A3               	movwf	??_Counting+1
  3206  019F  0823               	movf	??_Counting+1,w
  3207  01A0  00F4               	movwf	Sec2Time@t3
  3208  01A1  0841               	movf	Counting@s4,w
  3209  01A2  00A4               	movwf	??_Counting+2
  3210  01A3  0824               	movf	??_Counting+2,w
  3211  01A4  00F5               	movwf	Sec2Time@t4
  3212  01A5  0844               	movf	Counting@s1,w
  3213  01A6  120A  118A  246E   	fcall	_Sec2Time
  3214  01A9  0008               	return
  3215  01AA                     __end_of_Counting:	
  3216                           
  3217                           	psect	text11
  3218  046E                     __ptext11:	
  3219 ;; *************** function _Sec2Time *****************
  3220 ;; Defined at:
  3221 ;;		line 118 in file "TRAFFIC.c"
  3222 ;; Parameters:    Size  Location     Type
  3223 ;;  t1              1    wreg     unsigned char 
  3224 ;;  t2              1    3[COMMON] unsigned char 
  3225 ;;  t3              1    4[COMMON] unsigned char 
  3226 ;;  t4              1    5[COMMON] unsigned char 
  3227 ;; Auto vars:     Size  Location     Type
  3228 ;;  t1              1    0[BANK0 ] unsigned char 
  3229 ;;  k               1    1[BANK0 ] unsigned char 
  3230 ;; Return value:  Size  Location     Type
  3231 ;;                  1    wreg      void 
  3232 ;; Registers used:
  3233 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3234 ;; Tracked objects:
  3235 ;;		On entry : 0/0
  3236 ;;		On exit  : 0/0
  3237 ;;		Unchanged: 0/0
  3238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3239 ;;      Params:         3       0       0       0       0
  3240 ;;      Locals:         0       2       0       0       0
  3241 ;;      Temps:          1       0       0       0       0
  3242 ;;      Totals:         4       2       0       0       0
  3243 ;;Total ram usage:        6 bytes
  3244 ;; Hardware stack levels used:    1
  3245 ;; Hardware stack levels required when called:    2
  3246 ;; This function calls:
  3247 ;;		Nothing
  3248 ;; This function is called by:
  3249 ;;		_Counting
  3250 ;; This function uses a non-reentrant model
  3251 ;;
  3252                           
  3253                           
  3254                           ;psect for function _Sec2Time
  3255  046E                     _Sec2Time:	
  3256                           
  3257                           ;incstack = 0
  3258                           ; Regs used in _Sec2Time: [wreg-fsr0h+status,2+status,0]
  3259                           ;Sec2Time@t1 stored from wreg
  3260  046E  1283               	bcf	3,5	;RP0=0, select bank0
  3261  046F  1303               	bcf	3,6	;RP1=0, select bank0
  3262  0470  00A0               	movwf	Sec2Time@t1
  3263                           
  3264                           ;TRAFFIC.c: 118: void Sec2Time(char t1,char t2,char t3,char t4);TRAFFIC.c: 119: {;TRAFFI
      +                          C.c: 120:     for(char k=0;k<8;k++)
  3265  0471  01A1               	clrf	Sec2Time@k
  3266  0472                     l2320:	
  3267                           
  3268                           ;TRAFFIC.c: 121:          Seg[k]=0;
  3269  0472  0821               	movf	Sec2Time@k,w
  3270  0473  3E45               	addlw	(low (_Seg| 0))& (0+255)
  3271  0474  0084               	movwf	4
  3272  0475  1383               	bcf	3,7	;select IRP bank0
  3273  0476  0180               	clrf	0
  3274  0477  3001               	movlw	1
  3275  0478  00F6               	movwf	??_Sec2Time
  3276  0479  0876               	movf	??_Sec2Time,w
  3277  047A  07A1               	addwf	Sec2Time@k,f
  3278  047B  3008               	movlw	8
  3279  047C  0221               	subwf	Sec2Time@k,w
  3280  047D  1803               	btfsc	3,0
  3281  047E  2C86               	goto	l2328
  3282  047F  2C72               	goto	l2320
  3283  0480                     l2326:	
  3284                           
  3285                           ;TRAFFIC.c: 123:     {;TRAFFIC.c: 124:         Seg[0]++;
  3286  0480  3001               	movlw	1
  3287  0481  00F6               	movwf	??_Sec2Time
  3288  0482  0876               	movf	??_Sec2Time,w
  3289  0483  07C5               	addwf	_Seg,f
  3290                           
  3291                           ;TRAFFIC.c: 125:         t1-=10;
  3292  0484  300A               	movlw	10
  3293  0485  02A0               	subwf	Sec2Time@t1,f
  3294  0486                     l2328:	
  3295                           
  3296                           ;TRAFFIC.c: 122:     while(t1>=10)
  3297  0486  300A               	movlw	10
  3298  0487  0220               	subwf	Sec2Time@t1,w
  3299  0488  1C03               	btfss	3,0
  3300  0489  2C91               	goto	l2332
  3301  048A  2C80               	goto	l2326
  3302  048B                     l2330:	
  3303                           
  3304                           ;TRAFFIC.c: 128:      {;TRAFFIC.c: 129:         Seg[2]++;
  3305  048B  3001               	movlw	1
  3306  048C  00F6               	movwf	??_Sec2Time
  3307  048D  0876               	movf	??_Sec2Time,w
  3308  048E  07C7               	addwf	_Seg+2,f
  3309                           
  3310                           ;TRAFFIC.c: 130:         t2-=10;
  3311  048F  300A               	movlw	10
  3312  0490  02F3               	subwf	Sec2Time@t2,f
  3313  0491                     l2332:	
  3314                           
  3315                           ;TRAFFIC.c: 127:      while(t2>=10)
  3316  0491  300A               	movlw	10
  3317  0492  0273               	subwf	Sec2Time@t2,w
  3318  0493  1C03               	btfss	3,0
  3319  0494  2C9C               	goto	l2336
  3320  0495  2C8B               	goto	l2330
  3321  0496                     l2334:	
  3322                           
  3323                           ;TRAFFIC.c: 133:         Seg[4]++;
  3324  0496  3001               	movlw	1
  3325  0497  00F6               	movwf	??_Sec2Time
  3326  0498  0876               	movf	??_Sec2Time,w
  3327  0499  07C9               	addwf	_Seg+4,f
  3328                           
  3329                           ;TRAFFIC.c: 134:         t3-=10;
  3330  049A  300A               	movlw	10
  3331  049B  02F4               	subwf	Sec2Time@t3,f
  3332  049C                     l2336:	
  3333                           
  3334                           ;TRAFFIC.c: 132:      while(t3>=10){
  3335  049C  300A               	movlw	10
  3336  049D  0274               	subwf	Sec2Time@t3,w
  3337  049E  1C03               	btfss	3,0
  3338  049F  2CA7               	goto	l2340
  3339  04A0  2C96               	goto	l2334
  3340  04A1                     l2338:	
  3341                           
  3342                           ;TRAFFIC.c: 137:      {;TRAFFIC.c: 138:         Seg[6]++;
  3343  04A1  3001               	movlw	1
  3344  04A2  00F6               	movwf	??_Sec2Time
  3345  04A3  0876               	movf	??_Sec2Time,w
  3346  04A4  07CB               	addwf	_Seg+6,f
  3347                           
  3348                           ;TRAFFIC.c: 139:         t4-=10;
  3349  04A5  300A               	movlw	10
  3350  04A6  02F5               	subwf	Sec2Time@t4,f
  3351  04A7                     l2340:	
  3352                           
  3353                           ;TRAFFIC.c: 136:      while(t4>=10)
  3354  04A7  300A               	movlw	10
  3355  04A8  0275               	subwf	Sec2Time@t4,w
  3356  04A9  1803               	skipnc
  3357  04AA  2CA1               	goto	l2338
  3358                           
  3359                           ;TRAFFIC.c: 141:     Seg[1]=t1;
  3360  04AB  0820               	movf	Sec2Time@t1,w
  3361  04AC  00F6               	movwf	??_Sec2Time
  3362  04AD  0876               	movf	??_Sec2Time,w
  3363  04AE  00C6               	movwf	_Seg+1
  3364                           
  3365                           ;TRAFFIC.c: 142:     Seg[3]=t2;
  3366  04AF  0873               	movf	Sec2Time@t2,w
  3367  04B0  00F6               	movwf	??_Sec2Time
  3368  04B1  0876               	movf	??_Sec2Time,w
  3369  04B2  00C8               	movwf	_Seg+3
  3370                           
  3371                           ;TRAFFIC.c: 143:     Seg[5]=t3;
  3372  04B3  0874               	movf	Sec2Time@t3,w
  3373  04B4  00F6               	movwf	??_Sec2Time
  3374  04B5  0876               	movf	??_Sec2Time,w
  3375  04B6  00CA               	movwf	_Seg+5
  3376                           
  3377                           ;TRAFFIC.c: 144:     Seg[7]=t4;
  3378  04B7  0875               	movf	Sec2Time@t4,w
  3379  04B8  00F6               	movwf	??_Sec2Time
  3380  04B9  0876               	movf	??_Sec2Time,w
  3381  04BA  00CC               	movwf	_Seg+7
  3382  04BB  0008               	return
  3383  04BC                     __end_of_Sec2Time:	
  3384                           
  3385                           	psect	text12
  3386  055F                     __ptext12:	
  3387 ;; *************** function _ISR *****************
  3388 ;; Defined at:
  3389 ;;		line 77 in file "main.c"
  3390 ;; Parameters:    Size  Location     Type
  3391 ;;		None
  3392 ;; Auto vars:     Size  Location     Type
  3393 ;;		None
  3394 ;; Return value:  Size  Location     Type
  3395 ;;                  1    wreg      void 
  3396 ;; Registers used:
  3397 ;;		wreg, status,2, status,0, pclath, cstack
  3398 ;; Tracked objects:
  3399 ;;		On entry : 0/0
  3400 ;;		On exit  : 0/0
  3401 ;;		Unchanged: 0/0
  3402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3403 ;;      Params:         0       0       0       0       0
  3404 ;;      Locals:         0       0       0       0       0
  3405 ;;      Temps:          2       0       0       0       0
  3406 ;;      Totals:         2       0       0       0       0
  3407 ;;Total ram usage:        2 bytes
  3408 ;; Hardware stack levels used:    1
  3409 ;; Hardware stack levels required when called:    1
  3410 ;; This function calls:
  3411 ;;		_TMR2_ClearIntFlag
  3412 ;;		_TMR2_GetIntFlag
  3413 ;; This function is called by:
  3414 ;;		Interrupt level 1
  3415 ;; This function uses a non-reentrant model
  3416 ;;
  3417                           
  3418                           
  3419                           ;psect for function _ISR
  3420  055F                     _ISR:	
  3421                           
  3422                           ;main.c: 79:     if( TMR2_GetIntFlag())
  3423  055F  120A  118A  25BD  120A  118A  	fcall	_TMR2_GetIntFlag
  3424  0564  3A00               	xorlw	0
  3425  0565  1903               	skipnz
  3426  0566  2D6F               	goto	i1l89
  3427                           
  3428                           ;main.c: 80:     {;main.c: 81:         TMR2_ClearIntFlag();
  3429  0567  120A  118A  25C5  120A  118A  	fcall	_TMR2_ClearIntFlag
  3430                           
  3431                           ;main.c: 82:         SysTick.On_Off=OFF;
  3432  056C  1283               	bcf	3,5	;RP0=0, select bank0
  3433  056D  1303               	bcf	3,6	;RP1=0, select bank0
  3434  056E  103F               	bcf	_SysTick,0
  3435  056F                     i1l89:	
  3436  056F  0872               	movf	??_ISR+1,w
  3437  0570  008A               	movwf	10
  3438  0571  0E71               	swapf	??_ISR^(0+4294967168),w
  3439  0572  0083               	movwf	3
  3440  0573  0EFE               	swapf	126,f
  3441  0574  0E7E               	swapf	126,w
  3442  0575  0009               	retfie
  3443  0576                     __end_of_ISR:	
  3444                           
  3445                           	psect	intentry
  3446  0004                     __pintentry:	
  3447                           ;incstack = 0
  3448                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  3449                           
  3450  0004                     interrupt_function:	
  3451  007E                     saved_w	set	btemp
  3452  0004  00FE               	movwf	btemp
  3453  0005  0E03               	swapf	3,w
  3454  0006  00F1               	movwf	??_ISR
  3455  0007  080A               	movf	10,w
  3456  0008  00F2               	movwf	??_ISR+1
  3457  0009  120A  118A  2D5F   	ljmp	_ISR
  3458                           
  3459                           	psect	text13
  3460  05BD                     __ptext13:	
  3461 ;; *************** function _TMR2_GetIntFlag *****************
  3462 ;; Defined at:
  3463 ;;		line 53 in file "TMR2.c"
  3464 ;; Parameters:    Size  Location     Type
  3465 ;;		None
  3466 ;; Auto vars:     Size  Location     Type
  3467 ;;		None
  3468 ;; Return value:  Size  Location     Type
  3469 ;;                  1    wreg      unsigned char 
  3470 ;; Registers used:
  3471 ;;		wreg
  3472 ;; Tracked objects:
  3473 ;;		On entry : 0/0
  3474 ;;		On exit  : 0/0
  3475 ;;		Unchanged: 0/0
  3476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3477 ;;      Params:         0       0       0       0       0
  3478 ;;      Locals:         0       0       0       0       0
  3479 ;;      Temps:          0       0       0       0       0
  3480 ;;      Totals:         0       0       0       0       0
  3481 ;;Total ram usage:        0 bytes
  3482 ;; Hardware stack levels used:    1
  3483 ;; This function calls:
  3484 ;;		Nothing
  3485 ;; This function is called by:
  3486 ;;		_ISR
  3487 ;; This function uses a non-reentrant model
  3488 ;;
  3489                           
  3490                           
  3491                           ;psect for function _TMR2_GetIntFlag
  3492  05BD                     _TMR2_GetIntFlag:	
  3493                           
  3494                           ;TMR2.c: 55:      return (PIR1 & (1<<1)) ? 1:0;
  3495                           
  3496                           ;incstack = 0
  3497                           ; Regs used in _TMR2_GetIntFlag: [wreg]
  3498  05BD  1283               	bcf	3,5	;RP0=0, select bank0
  3499  05BE  1303               	bcf	3,6	;RP1=0, select bank0
  3500  05BF  1C8C               	btfss	12,1	;volatile
  3501  05C0  2DC3               	goto	u159_20
  3502  05C1  3001               	movlw	1
  3503  05C2  0008               	return
  3504  05C3                     u159_20:	
  3505  05C3  3000               	movlw	0
  3506  05C4  0008               	return
  3507  05C5                     __end_of_TMR2_GetIntFlag:	
  3508                           
  3509                           	psect	text14
  3510  05C5                     __ptext14:	
  3511 ;; *************** function _TMR2_ClearIntFlag *****************
  3512 ;; Defined at:
  3513 ;;		line 58 in file "TMR2.c"
  3514 ;; Parameters:    Size  Location     Type
  3515 ;;		None
  3516 ;; Auto vars:     Size  Location     Type
  3517 ;;		None
  3518 ;; Return value:  Size  Location     Type
  3519 ;;                  1    wreg      void 
  3520 ;; Registers used:
  3521 ;;		wreg, status,2, status,0
  3522 ;; Tracked objects:
  3523 ;;		On entry : 0/0
  3524 ;;		On exit  : 0/0
  3525 ;;		Unchanged: 0/0
  3526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3527 ;;      Params:         0       0       0       0       0
  3528 ;;      Locals:         0       0       0       0       0
  3529 ;;      Temps:          1       0       0       0       0
  3530 ;;      Totals:         1       0       0       0       0
  3531 ;;Total ram usage:        1 bytes
  3532 ;; Hardware stack levels used:    1
  3533 ;; This function calls:
  3534 ;;		Nothing
  3535 ;; This function is called by:
  3536 ;;		_ISR
  3537 ;; This function uses a non-reentrant model
  3538 ;;
  3539                           
  3540                           
  3541                           ;psect for function _TMR2_ClearIntFlag
  3542  05C5                     _TMR2_ClearIntFlag:	
  3543                           
  3544                           ;TMR2.c: 60:     PIR1&=~(1<<1);
  3545                           
  3546                           ;incstack = 0
  3547                           ; Regs used in _TMR2_ClearIntFlag: [wreg+status,2+status,0]
  3548  05C5  30FD               	movlw	253
  3549  05C6  00F0               	movwf	??_TMR2_ClearIntFlag
  3550  05C7  0870               	movf	??_TMR2_ClearIntFlag,w
  3551  05C8  1283               	bcf	3,5	;RP0=0, select bank0
  3552  05C9  1303               	bcf	3,6	;RP1=0, select bank0
  3553  05CA  058C               	andwf	12,f	;volatile
  3554  05CB  0008               	return
  3555  05CC                     __end_of_TMR2_ClearIntFlag:	
  3556  007E                     btemp	set	126	;btemp
  3557  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    32
    Data        15
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     17      47
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Latch_Traffic_LED@LATptr	PTR int  size(1) Largest target is 2
		 -> LAT(COMMON[2]), 

    LED_7SEGMENT_Update@val	PTR unsigned char  size(1) Largest target is 10
		 -> Seg(BANK0[10]), 


Critical Paths under _main in COMMON

    _main->_TMR2_Setup
    _main->_VIP_mode
    _VIP_mode->_LED_7SEGMENT_Update
    _VIP_mode->_Latch_Traffic_LED
    _Counting->_Sec2Time

Critical Paths under _ISR in COMMON

    _ISR->_TMR2_ClearIntFlag

Critical Paths under _main in BANK0

    _main->_Counting
    _Counting->_Sec2Time

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    3869
                                             15 BANK0      2     2      0
                            _Clr_LED
                           _Counting
                _LED_7SEGMENT_Update
                  _Latch_Traffic_LED
                          _PORT_Init
                     _TMR2_Interrupt
                            _TMR2_ON
                         _TMR2_Setup
                      _Traffic_Light
                           _VIP_mode
 ---------------------------------------------------------------------------------
 (1) _VIP_mode                                             3     3      0    1265
                                              6 COMMON     2     2      0
                                              0 BANK0      1     1      0
                            _Clr_LED
                _LED_7SEGMENT_Update
                  _Latch_Traffic_LED
 ---------------------------------------------------------------------------------
 (2) _Latch_Traffic_LED                                    3     3      0     242
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _LED_7SEGMENT_Update                                  3     3      0     924
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _Clr_LED                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Traffic_Light                                        2     0      2     340
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _TMR2_Setup                                           5     3      2     262
                                              3 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _TMR2_ON                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR2_Interrupt                                       2     2      0      22
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _PORT_Init                                            1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Counting                                            13    13      0     814
                                              2 BANK0     13    13      0
                           _Sec2Time
 ---------------------------------------------------------------------------------
 (2) _Sec2Time                                             6     3      3     629
                                              3 COMMON     4     1      3
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  2     2      0       0
                                              1 COMMON     2     2      0
                  _TMR2_ClearIntFlag
                    _TMR2_GetIntFlag
 ---------------------------------------------------------------------------------
 (4) _TMR2_GetIntFlag                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _TMR2_ClearIntFlag                                    1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Clr_LED
   _Counting
     _Sec2Time
   _LED_7SEGMENT_Update
   _Latch_Traffic_LED
   _PORT_Init
   _TMR2_Interrupt
   _TMR2_ON
   _TMR2_Setup
   _Traffic_Light
   _VIP_mode
     _Clr_LED
     _LED_7SEGMENT_Update
     _Latch_Traffic_LED

 _ISR (ROOT)
   _TMR2_ClearIntFlag
   _TMR2_GetIntFlag

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     11      2F       5       58.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       B       1       78.6%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3A      12        0.0%
ABS                  0      0      3A       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Apr 30 15:24:13 2020

                              pc 0002                      __CFG_CP$OFF 0000                               l74 041E  
                             fsr 0004                              l105 04C9                              l114 04FB  
                            l106 04CB                              l108 04CD                              l163 01BE  
                            l261 010B                              l262 011D                              l263 012F  
                            l264 0141                              l360 037E                              l258 00DF  
                            l354 0340                              l348 0306                              l366 03BC  
                            _LED 0031                              _LAT 0079                              _PR2 0092  
                   __CFG_CPD$OFF 0000                              _ISR 055F                              _VIP 003D  
                            _Seg 0045                _Latch_Traffic_LED 059D                              fsr0 0004  
                            indf 0000                      _VIP_PrioTab 0516                     __CFG_IESO$ON 0000  
                     Counting@S1 0036                       Counting@S2 0035                       Counting@S3 0034  
                     Counting@S4 0033                       Counting@s1 0044                       Counting@s2 0043  
                     Counting@s3 0042                       Counting@s4 0041               ?_Latch_Traffic_LED 0070  
                   __CFG_LVP$OFF 0000                             ?_ISR 0070                             l2300 02C6  
                           l2220 021C                             l2204 01FA                             l2302 02C9  
                           l2320 0472                             l2240 0244                             l2224 0222  
                           l2208 0200                             l2304 02CB                             l2330 048B  
                           l2340 04A7                             l2332 0491                             l2252 0260  
                           l2236 023E                             l2172 01B8                             l2334 0496  
                           l2326 0480                             l2336 049C                             l2328 0486  
                           l2440 017A                             l2432 0164                             l2424 014E  
                           l2272 0288                             l2256 0266                             l2192 01DF  
                           l2176 01C0                             l2520 0379                             l2338 04A1  
                           l2450 0195                             l2442 017F                             l2434 0169  
                           l2426 0153                             l2354 0046                             l2284 02A4  
                           l2268 0282                             l2188 01DB                             l2390 00C6  
                           l2382 0077                             l2448 0190                             l2384 0080  
                           l2368 005B                             l2288 02AA                             l2464 02F1  
                           l2608 0469                             l2386 0096                             l2394 00E0  
                           l2546 03B7                             l2388 00AE                             l2396 00F9  
                           l1780 04CE                             l2572 03F5                             l1782 04E1  
                           l2670 02D3                             l2494 0302                             l2672 04D6  
                           l2674 00E8                             l1796 0584                             l1798 058A  
                           u1165 04EF                             u2205 039C                             u2145 0324  
                           u2235 03DA                             u2175 035E                             u2265 0448  
                           _PIE1 008C                             _PIR1 000C                             i1l89 056F  
                           _WPUB 0095                     __CFG_WRT$OFF 0000                    __CFG_FCMEN$ON 0000  
            ??_Latch_Traffic_LED 0073                             _Temp 003C                  __end_of_TMR2_ON 05D0  
                           _main 03FA                             btemp 007E                    __CFG_BOREN$ON 0000  
                           start 000C                  __end_of_Clr_LED 05D3                    __CFG_MCLRE$ON 0000  
        __end_of_TMR2_GetIntFlag 05C5                            ??_ISR 0071        __end_of_Latch_Traffic_LED 05AE  
                          ?_main 0070                    __CFG_WDTE$OFF 0000                            _T2CON 0012  
                          _PORTA 0005                            _PORTB 0006                            _PORTC 0007  
                          _PORTD 0008                            _TRISA 0085                            _TRISB 0086  
                          _TRISC 0087                            _TRISD 0088                      ?_TMR2_Setup 0073  
                          _reset 003E               __size_of_PORT_Init 001F                            pclath 000A  
               __end_of_VIP_mode 03FA                            status 0003                            wtemp0 007E  
                __initialization 000F                 __end_of_Sec2Time 04BC                     __end_of_main 046E  
                    _BlinkStatus 0078                 __end_of_Counting 01AA              _LED_7SEGMENT_Update 01AA  
                         ??_main 002F                        ??_TMR2_ON 0073             ?_LED_7SEGMENT_Update 0070  
                         _ANSELH 0189                           _INTCON 000B                           u159_20 05C3  
                      ??_Clr_LED 0073                           _OSCCON 008F                   __CFG_PWRTE$OFF 0000  
                         _SegTab 0506                 ?_TMR2_GetIntFlag 0070              __size_of_TMR2_Setup 0040  
              __end_of_PORT_Init 0545       __size_of_Latch_Traffic_LED 0011         LED_7SEGMENT_Update@State 003A  
                         saved_w 007E            ??_LED_7SEGMENT_Update 0073          __end_of__initialization 002D  
                 __pcstackCOMMON 0070                  TMR2_Setup@presc 0073                     __pidataBANK0 05AE  
                      ?_VIP_mode 0070            __end_of_Traffic_Light 055F                        ?_Sec2Time 0073  
                     __pbssBANK0 0031                        ?_Counting 0070          __size_of_TMR2_Interrupt 0016  
                     __pmaintext 03FA                       __pintentry 0004                 TMR2_Interrupt@En 0074  
                     ??_VIP_mode 0076                     ??_TMR2_Setup 0075                          _TMR2_ON 05CC  
                     ??_Sec2Time 0076                       __stringtab 0500                       ??_Counting 0022  
                        _Clr_LED 05D0                          _SysTick 003F               __end_of_TMR2_Setup 04FC  
                      VIP_mode@i 0020                          __ptext1 02EE                          __ptext2 059D  
                        __ptext3 01AA                          __ptext4 05D0                          __ptext5 0545  
                        __ptext6 04BC                          __ptext7 05CC                          __ptext8 0576  
                        __ptext9 0526                     __size_of_ISR 0017             end_of_initialization 002D  
                   _Counting$252 0025                     _Counting$253 0027                     _Counting$254 0029  
                   _Counting$255 002B                     _Counting$256 002D                        _PORT_Init 0526  
                      Sec2Time@k 0021                        Counting@T 0040                        Counting@i 0038  
                      Counting@j 0037                   _TMR2_Interrupt 0576                   __end_of_SegTab 0516  
               Traffic_Light@led 0073                 TMR2_Setup@period 0077                 TMR2_Setup@postsc 0074  
                     ?_PORT_Init 0070      __end_of_LED_7SEGMENT_Update 02EE           LED_7SEGMENT_Update@val 0075  
       __size_of_TMR2_GetIntFlag 0008              start_initialization 000F                      __end_of_ISR 0576  
              __size_of_VIP_mode 010C           __end_of_TMR2_Interrupt 058C                __size_of_Sec2Time 004E  
              __size_of_Counting 0179         __CFG_FOSC$INTRC_NOCLKOUT 0000                       init_fetch0 058C  
                    __pdataBANK0 0040                      __pbssCOMMON 0078                        ___latbits 0002  
                  __pcstackBANK0 0020                         ?_TMR2_ON 0070                         ?_Clr_LED 0070  
                ?_TMR2_Interrupt 0070           __size_of_Traffic_Light 001A                        __pstrings 0500  
                    ??_PORT_Init 0073                ??_TMR2_GetIntFlag 0070                interrupt_function 0004  
                    __stringbase 0505                _TMR2_ClearIntFlag 05C5                         _VIP_mode 02EE  
             ?_TMR2_ClearIntFlag 0070                    _Traffic_Light 0545                         _Sec2Time 046E  
               __size_of_TMR2_ON 0004              ??_TMR2_ClearIntFlag 0070                         _Counting 0031  
                       _SegDigit 003B                 __size_of_Clr_LED 0003        __end_of_TMR2_ClearIntFlag 05CC  
             __end_of__stringtab 0506          Latch_Traffic_LED@LATptr 0075  LED_7SEGMENT_Update@BlinkCounter 0039  
                 ?_Traffic_Light 0073                         __ptext10 0031                         __ptext11 046E  
                       __ptext12 055F                         __ptext13 05BD                         __ptext14 05C5  
              __CFG_BOR4V$BOR40V 0000                    __size_of_main 0074                       _INTCONbits 000B  
               ??_TMR2_Interrupt 0073                         init_ram0 0590     __size_of_LED_7SEGMENT_Update 0144  
            __end_of_VIP_PrioTab 0526                         intlevel1 0000                        stringcode 0500  
     __size_of_TMR2_ClearIntFlag 0007                  _TMR2_GetIntFlag 05BD                       _OPTION_REG 0081  
                ??_Traffic_Light 0075                         stringdir 0500                         stringtab 0500  
                     _TMR2_Setup 04BC                       Sec2Time@t1 0020                       Sec2Time@t2 0073  
                     Sec2Time@t3 0074                       Sec2Time@t4 0075  
